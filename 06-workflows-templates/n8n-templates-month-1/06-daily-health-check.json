{
  "name": "Daily Health Check - All Clients",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 7 * * *"
            }
          ]
        }
      },
      "id": "daily-trigger",
      "name": "Daily 7 AM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "value": "CLIENTS_MASTER_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Clients",
          "mode": "string"
        },
        "filters": {
          "conditions": [
            {
              "column": "status",
              "condition": "equal",
              "value": "active"
            }
          ]
        },
        "options": {
          "returnAll": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [460, 300],
      "id": "get-active-clients",
      "name": "Get Active Clients",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare health check data for all active clients\nconst clients = $json;\nconst healthChecks = [];\nconst today = new Date();\nconst yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);\n\n// For each active client, create health check tasks\nclients.forEach(client => {\n  healthChecks.push({\n    clientId: client.client_id,\n    clientName: client.name,\n    teamName: client.team_name,\n    email: client.email,\n    contentSheetId: client.content_sheet_id,\n    checkDate: today.toISOString().split('T')[0],\n    yesterdayDate: yesterday.toISOString().split('T')[0],\n    expectedWorkflows: [\n      'content-generator',\n      'telegram-approvals', \n      'multi-platform-publisher'\n    ],\n    healthScore: 0,\n    issues: [],\n    lastPostDate: null,\n    postsGenerated24h: 0,\n    postsApproved24h: 0,\n    postsPublished24h: 0\n  });\n});\n\nreturn healthChecks.map(check => ({ json: check }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300],
      "id": "prepare-health-checks",
      "name": "Prepare Health Checks"
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "value": "={{ $json.contentSheetId }}",
          "mode": "string"
        },
        "sheetName": {
          "value": "Generated_Content",
          "mode": "string"
        },
        "filters": {
          "conditions": [
            {
              "column": "timestamp",
              "condition": "dateIsAfter",
              "value": "={{ $json.yesterdayDate }}"
            }
          ]
        },
        "options": {
          "returnAll": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [900, 300],
      "id": "check-client-content",
      "name": "Check Client Content",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Analyze client content health from past 24 hours\nconst clientData = $('prepare-health-checks').item;\nconst contentData = $json;\n\n// Count different types of posts\nconst generated = contentData.length;\nconst approved = contentData.filter(post => post.status === 'approved').length;\nconst published = contentData.filter(post => post.published === 'true').length;\nconst pending = contentData.filter(post => post.status === 'pending_approval').length;\nconst rejected = contentData.filter(post => post.status === 'rejected').length;\n\n// Calculate health score (0-100)\nlet healthScore = 100;\nconst issues = [];\n\n// Check content generation\nif (generated === 0) {\n  healthScore -= 40;\n  issues.push('No content generated in 24 hours');\n} else if (generated < 2) {\n  healthScore -= 20;\n  issues.push('Low content generation (less than 2 posts)');\n}\n\n// Check approval rate\nconst approvalRate = generated > 0 ? approved / generated : 0;\nif (approvalRate < 0.5) {\n  healthScore -= 20;\n  issues.push(`Low approval rate: ${Math.round(approvalRate * 100)}%`);\n}\n\n// Check publishing\nif (approved > 0 && published === 0) {\n  healthScore -= 30;\n  issues.push('Approved content not published');\n}\n\n// Check for stale pending posts\nif (pending > 3) {\n  healthScore -= 15;\n  issues.push(`Too many pending posts: ${pending}`);\n}\n\n// Find last post date\nconst sortedPosts = contentData\n  .filter(post => post.published === 'true')\n  .sort((a, b) => new Date(b.published_at) - new Date(a.published_at));\n\nconst lastPostDate = sortedPosts[0]?.published_at || null;\nconst daysSinceLastPost = lastPostDate ? \n  Math.floor((new Date() - new Date(lastPostDate)) / (1000 * 60 * 60 * 24)) : 999;\n\nif (daysSinceLastPost > 2) {\n  healthScore -= 25;\n  issues.push(`No posts published in ${daysSinceLastPost} days`);\n}\n\n// Ensure score doesn't go below 0\nhealthScore = Math.max(0, healthScore);\n\n// Determine status\nlet status = 'healthy';\nif (healthScore < 50) status = 'critical';\nelse if (healthScore < 70) status = 'warning';\n\nreturn [{\n  json: {\n    ...clientData,\n    postsGenerated24h: generated,\n    postsApproved24h: approved,\n    postsPublished24h: published,\n    postsPending24h: pending,\n    postsRejected24h: rejected,\n    approvalRate: Math.round(approvalRate * 100),\n    healthScore,\n    status,\n    issues,\n    lastPostDate,\n    daysSinceLastPost,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300],
      "id": "analyze-client-health",
      "name": "Analyze Client Health"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "value": "SYSTEM_LOG_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Daily_Health_Check",
          "mode": "string"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "date": "={{ $json.checkDate }}",
            "client_id": "={{ $json.clientId }}",
            "client_name": "={{ $json.clientName }}",
            "team_name": "={{ $json.teamName }}",
            "health_score": "={{ $json.healthScore }}",
            "status": "={{ $json.status }}",
            "posts_generated": "={{ $json.postsGenerated24h }}",
            "posts_approved": "={{ $json.postsApproved24h }}",
            "posts_published": "={{ $json.postsPublished24h }}",
            "approval_rate": "={{ $json.approvalRate }}%",
            "issues": "={{ $json.issues.join('; ') }}",
            "last_post_date": "={{ $json.lastPostDate }}",
            "days_since_post": "={{ $json.daysSinceLastPost }}",
            "timestamp": "={{ $json.timestamp }}"
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [1340, 300],
      "id": "log-health-data",
      "name": "Log Health Data",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "critical",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              }
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "warning",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1560, 300],
      "id": "check-alert-needed",
      "name": "Check Alert Needed"
    },
    {
      "parameters": {
        "chatId": "ADMIN_TELEGRAM_CHAT_ID",
        "text": "üö® CLIENT HEALTH CRITICAL!\n\nüë§ Client: {{ $json.clientName }} ({{ $json.teamName }})\nüìä Health Score: {{ $json.healthScore }}/100\n‚è∞ Check Date: {{ $json.checkDate }}\n\nüìà 24h Stats:\n‚Ä¢ Generated: {{ $json.postsGenerated24h }} posts\n‚Ä¢ Approved: {{ $json.postsApproved24h }} posts ({{ $json.approvalRate }}%)\n‚Ä¢ Published: {{ $json.postsPublished24h }} posts\n‚Ä¢ Pending: {{ $json.postsPending24h }} posts\n\n‚ùå Issues Found:\n{{ $json.issues.map(issue => `‚Ä¢ ${issue}`).join('\\n') }}\n\nüìÖ Last Post: {{ $json.lastPostDate ? new Date($json.lastPostDate).toLocaleDateString() : 'Never' }}\n‚ö†Ô∏è Days Since: {{ $json.daysSinceLastPost }}\n\nüîß ACTION REQUIRED: Check workflows immediately!",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1780, 200],
      "id": "send-critical-alert",
      "name": "Send Critical Alert",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "ADMIN_TELEGRAM_CHAT_ID",
        "text": "‚ö†Ô∏è Client Health Warning\n\nüë§ {{ $json.clientName }} ({{ $json.teamName }})\nüìä Score: {{ $json.healthScore }}/100\n\nüìà 24h: {{ $json.postsGenerated24h }}gen, {{ $json.postsApproved24h }}app ({{ $json.approvalRate }}%), {{ $json.postsPublished24h }}pub\n\n‚ö†Ô∏è Issues:\n{{ $json.issues.map(issue => `‚Ä¢ ${issue}`).join('\\n') }}\n\nüìÖ Last post: {{ $json.daysSinceLastPost }} days ago\n\nüìã Review recommended",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1780, 400],
      "id": "send-warning-alert",
      "name": "Send Warning Alert",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Aggregate health data from all clients\nconst allClients = $('analyze-client-health').all();\n\nconst summary = {\n  totalClients: allClients.length,\n  healthyClients: allClients.filter(c => c.json.status === 'healthy').length,\n  warningClients: allClients.filter(c => c.json.status === 'warning').length,\n  criticalClients: allClients.filter(c => c.json.status === 'critical').length,\n  averageHealthScore: Math.round(allClients.reduce((sum, c) => sum + c.json.healthScore, 0) / allClients.length),\n  totalPostsGenerated: allClients.reduce((sum, c) => sum + c.json.postsGenerated24h, 0),\n  totalPostsApproved: allClients.reduce((sum, c) => sum + c.json.postsApproved24h, 0),\n  totalPostsPublished: allClients.reduce((sum, c) => sum + c.json.postsPublished24h, 0),\n  overallApprovalRate: 0,\n  checkDate: new Date().toISOString().split('T')[0],\n  clientDetails: allClients.map(c => ({\n    name: c.json.clientName,\n    team: c.json.teamName,\n    score: c.json.healthScore,\n    status: c.json.status,\n    issues: c.json.issues\n  }))\n};\n\n// Calculate overall approval rate\nsummary.overallApprovalRate = summary.totalPostsGenerated > 0 ? \n  Math.round((summary.totalPostsApproved / summary.totalPostsGenerated) * 100) : 0;\n\nreturn [{ json: summary }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 500],
      "id": "create-daily-summary",
      "name": "Create Daily Summary"
    },
    {
      "parameters": {
        "chatId": "ADMIN_TELEGRAM_CHAT_ID",
        "text": "üìä DAILY HEALTH REPORT - {{ $json.checkDate }}\n\nüè• Overall Health:\n‚Ä¢ Total Clients: {{ $json.totalClients }}\n‚Ä¢ Average Score: {{ $json.averageHealthScore }}/100\n‚Ä¢ ‚úÖ Healthy: {{ $json.healthyClients }}\n‚Ä¢ ‚ö†Ô∏è Warning: {{ $json.warningClients }}\n‚Ä¢ üö® Critical: {{ $json.criticalClients }}\n\nüìà 24h Activity:\n‚Ä¢ Posts Generated: {{ $json.totalPostsGenerated }}\n‚Ä¢ Posts Approved: {{ $json.totalPostsApproved }} ({{ $json.overallApprovalRate }}%)\n‚Ä¢ Posts Published: {{ $json.totalPostsPublished }}\n\n{{ $json.clientDetails.length > 0 ? 'üë• Client Scores:\\n' + $json.clientDetails.map(c => `‚Ä¢ ${c.name}: ${c.score}/100 ${c.status === 'critical' ? 'üö®' : c.status === 'warning' ? '‚ö†Ô∏è' : '‚úÖ'}`).join('\\n') : '' }}\n\n{{ $json.criticalClients > 0 || $json.warningClients > 0 ? '‚ö° Action needed on clients with issues!' : '‚úÖ All systems healthy!' }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1560, 500],
      "id": "send-daily-summary",
      "name": "Send Daily Summary",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "content": "DAILY HEALTH CHECK SYSTEM:\n\nRuns every morning at 7 AM to check all active clients:\n\nHEALTH METRICS:\n‚úÖ Posts generated (24h)\n‚úÖ Approval rates\n‚úÖ Publishing success\n‚úÖ Days since last post\n‚úÖ Pending post backlog\n\nHEALTH SCORES:\n‚Ä¢ 80-100: Healthy ‚úÖ\n‚Ä¢ 50-79: Warning ‚ö†Ô∏è \n‚Ä¢ 0-49: Critical üö®\n\nALERT SYSTEM:\nüö® Critical: Immediate Telegram alert\n‚ö†Ô∏è Warning: Daily summary mention\n‚úÖ Healthy: Summary only\n\nDATA TRACKING:\n‚Ä¢ Logs to SYSTEM_LOG_SHEET_ID\n‚Ä¢ Daily summary to team\n‚Ä¢ Individual client alerts\n‚Ä¢ Trends over time\n\nSETUP:\n1. Ensure all clients have content_sheet_id in master sheet\n2. Create Daily_Health_Check tab in system log\n3. Set ADMIN_TELEGRAM_CHAT_ID for alerts\n4. Test with sample client data\n\nThis prevents client issues from going unnoticed and ensures proactive support.",
        "height": 400,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [240, 700],
      "id": "health-check-notes",
      "name": "Health Check Instructions"
    }
  ],
  "connections": {
    "Daily 7 AM": {
      "main": [
        [
          {
            "node": "Get Active Clients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Active Clients": {
      "main": [
        [
          {
            "node": "Prepare Health Checks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Health Checks": {
      "main": [
        [
          {
            "node": "Check Client Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Client Content": {
      "main": [
        [
          {
            "node": "Analyze Client Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Client Health": {
      "main": [
        [
          {
            "node": "Log Health Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Health Data": {
      "main": [
        [
          {
            "node": "Check Alert Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Alert Needed": {
      "main": [
        [
          {
            "node": "Send Critical Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Warning Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "saveExecutionProgress": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all"
  },
  "meta": {
    "instanceId": "daily-health-check"
  },
  "tags": []
}