{
  "name": "Error Monitor - Basic",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "*/15 * * * *"
            }
          ]
        }
      },
      "id": "monitor-trigger",
      "name": "Every 15 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "http://N8N_HOST:5678/api/v1/executions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-N8N-API-KEY",
              "value": "{{ $credentials.n8nApiKey }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "50"
            },
            {
              "name": "status",
              "value": "error"
            },
            {
              "name": "startedAfter",
              "value": "={{ new Date(Date.now() - 15 * 60 * 1000).toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [460, 300],
      "id": "get-failed-executions",
      "name": "Get Failed Executions",
      "credentials": {
        "httpHeaderAuth": {
          "id": "N8N_API_CRED_ID",
          "name": "n8n API Key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Analyze failed executions and categorize errors\nconst executions = $json.data || [];\nconst criticalErrors = [];\nconst warnings = [];\n\n// Critical workflows that must work\nconst criticalWorkflows = [\n  'content-generator-basic',\n  'telegram-approval-handler', \n  'multi-platform-publisher'\n];\n\n// Categorize errors by severity and workflow\nexecutions.forEach(execution => {\n  const workflowName = execution.workflowData?.name || 'Unknown';\n  const error = execution.data?.resultData?.error?.message || 'Unknown error';\n  const startTime = execution.startedAt;\n  \n  const errorData = {\n    workflowName,\n    error,\n    startTime,\n    executionId: execution.id,\n    isCritical: criticalWorkflows.includes(workflowName)\n  };\n  \n  if (criticalWorkflows.includes(workflowName)) {\n    criticalErrors.push(errorData);\n  } else {\n    warnings.push(errorData);\n  }\n});\n\n// Check for patterns (same error multiple times)\nconst errorCounts = {};\nexecutions.forEach(exec => {\n  const key = `${exec.workflowData?.name || 'Unknown'}_${exec.data?.resultData?.error?.message || 'Unknown'}`;\n  errorCounts[key] = (errorCounts[key] || 0) + 1;\n});\n\nconst repeatedErrors = Object.entries(errorCounts)\n  .filter(([key, count]) => count >= 3)\n  .map(([key, count]) => ({ pattern: key.replace('_', ': '), count }));\n\nreturn [{\n  json: {\n    totalErrors: executions.length,\n    criticalErrors,\n    warnings,\n    repeatedErrors,\n    timestamp: new Date().toISOString(),\n    needsImmediateAttention: criticalErrors.length > 0 || repeatedErrors.length > 0\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300],
      "id": "analyze-errors",
      "name": "Analyze Errors"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.needsImmediateAttention }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [900, 300],
      "id": "check-severity",
      "name": "Check Severity"
    },
    {
      "parameters": {
        "chatId": "ADMIN_TELEGRAM_CHAT_ID",
        "text": "üö® CRITICAL ERRORS DETECTED!\n\n‚è∞ Time: {{ $json.timestamp }}\nüìä Total Errors: {{ $json.totalErrors }}\n‚ùó Critical: {{ $json.criticalErrors.length }}\n‚ö†Ô∏è Warnings: {{ $json.warnings.length }}\n\n{{ $json.criticalErrors.length > 0 ? 'üî• CRITICAL WORKFLOWS FAILING:\\n' + $json.criticalErrors.map(e => `‚Ä¢ ${e.workflowName}: ${e.error}`).join('\\n') + '\\n\\n' : '' }}{{ $json.repeatedErrors.length > 0 ? 'üîÑ REPEATED ERRORS:\\n' + $json.repeatedErrors.map(e => `‚Ä¢ ${e.pattern} (${e.count}x)`).join('\\n') : '' }}\n\nüîß Check n8n dashboard immediately!",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1120, 200],
      "id": "send-critical-alert",
      "name": "Send Critical Alert",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "value": "SYSTEM_LOG_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Error_Log",
          "mode": "string"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "timestamp": "={{ $json.timestamp }}",
            "total_errors": "={{ $json.totalErrors }}",
            "critical_count": "={{ $json.criticalErrors.length }}",
            "warning_count": "={{ $json.warnings.length }}",
            "repeated_errors": "={{ $json.repeatedErrors.length }}",
            "needs_attention": "={{ $json.needsImmediateAttention ? 'YES' : 'NO' }}",
            "critical_details": "={{ JSON.stringify($json.criticalErrors) }}",
            "repeated_details": "={{ JSON.stringify($json.repeatedErrors) }}"
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [1120, 400],
      "id": "log-to-sheet",
      "name": "Log to Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.uptimerobot.com/v2/getMonitors",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "{{ $credentials.uptimeRobotApiKey }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "format",
              "value": "json"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [460, 500],
      "id": "check-external-services",
      "name": "Check External Services",
      "credentials": {
        "httpHeaderAuth": {
          "id": "UPTIME_ROBOT_CRED_ID",
          "name": "UptimeRobot API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Check external service health\nconst monitors = $json.monitors || [];\nconst downServices = monitors.filter(monitor => monitor.status !== 2); // 2 = up\n\nif (downServices.length > 0) {\n  return [{\n    json: {\n      hasOutages: true,\n      downServices: downServices.map(service => ({\n        name: service.friendly_name,\n        url: service.url,\n        status: service.status,\n        lastDownTime: service.last_down_time\n      })),\n      timestamp: new Date().toISOString()\n    }\n  }];\n} else {\n  return [{\n    json: {\n      hasOutages: false,\n      allServicesUp: true,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 500],
      "id": "analyze-service-health",
      "name": "Analyze Service Health"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.hasOutages }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [900, 500],
      "id": "check-outages",
      "name": "Check Outages"
    },
    {
      "parameters": {
        "chatId": "ADMIN_TELEGRAM_CHAT_ID",
        "text": "‚ö†Ô∏è EXTERNAL SERVICE OUTAGES\n\n{{ $json.downServices.map(service => `üî¥ ${service.name}\\n   ${service.url}\\n   Status: ${service.status === 0 ? 'Paused' : service.status === 1 ? 'Not checked yet' : service.status === 8 ? 'Seems down' : service.status === 9 ? 'Down' : 'Unknown'}\\n`).join('\\n') }}\n‚è∞ Detected: {{ new Date($json.timestamp).toLocaleString() }}\n\nüîß This may affect client workflows!",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1120, 600],
      "id": "send-outage-alert",
      "name": "Send Outage Alert",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "content": "ERROR MONITORING SYSTEM:\n\nRuns every 15 minutes to check:\n‚úÖ Failed n8n workflow executions\n‚úÖ Critical workflow health\n‚úÖ External service status\n‚úÖ Repeated error patterns\n\nALERT LEVELS:\nüö® Critical: Core workflows failing\n‚ö†Ô∏è Warning: Non-critical errors\nüîÑ Pattern: Same error 3+ times\nüî¥ Outage: External services down\n\nSETUP:\n1. Get n8n API key\n2. Set up UptimeRobot monitoring\n3. Replace ADMIN_TELEGRAM_CHAT_ID\n4. Create SYSTEM_LOG_SHEET_ID\n\nFEATURES:\n- Real-time error detection\n- Pattern recognition\n- Service health monitoring\n- Automatic logging\n- Instant Telegram alerts",
        "height": 400,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [240, 700],
      "id": "monitor-notes",
      "name": "Monitor Instructions"
    }
  ],
  "connections": {
    "Every 15 Minutes": {
      "main": [
        [
          {
            "node": "Get Failed Executions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check External Services",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Failed Executions": {
      "main": [
        [
          {
            "node": "Analyze Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Errors": {
      "main": [
        [
          {
            "node": "Check Severity",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log to Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Severity": {
      "main": [
        [
          {
            "node": "Send Critical Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check External Services": {
      "main": [
        [
          {
            "node": "Analyze Service Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Service Health": {
      "main": [
        [
          {
            "node": "Check Outages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Outages": {
      "main": [
        [
          {
            "node": "Send Outage Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "saveExecutionProgress": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all"
  },
  "meta": {
    "instanceId": "error-monitor-basic"
  },
  "tags": []
}