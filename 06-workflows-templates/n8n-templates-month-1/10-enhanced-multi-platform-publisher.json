{
  "name": "Enhanced Multi-Platform Publisher with Images",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "*/30 * * * *"
            }
          ]
        }
      },
      "id": "publishing-check",
      "name": "Check Every 30 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "value": "CLIENT_CONTENT_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Generated_Content",
          "mode": "string"
        },
        "filters": {
          "conditions": [
            {
              "column": "status",
              "condition": "equal",
              "value": "approved"
            },
            {
              "column": "published",
              "condition": "notEqual",
              "value": "true"
            }
          ]
        },
        "options": {
          "returnAll": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [460, 300],
      "id": "get-approved-content",
      "name": "Get Approved Content",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced platform-specific content preparation\nconst posts = $json;\nconst preparedPosts = [];\n\nposts.forEach(post => {\n  const now = new Date();\n  const scheduledTime = new Date(post.scheduled_time || post.timestamp);\n  \n  // Check if it's time to post (within 30-minute window or immediate)\n  const timeDiff = Math.abs(now.getTime() - scheduledTime.getTime());\n  const thirtyMinutes = 30 * 60 * 1000;\n  \n  if (timeDiff <= thirtyMinutes || post.publish_immediately === 'true') {\n    // Parse platforms and prepare content for each\n    const platforms = (post.platforms || 'instagram,facebook,twitter').split(',').map(p => p.trim());\n    const content = post.content.trim();\n    const hashtags = post.hashtags || '';\n    const imageUrl = post.image_url || null;\n    const imageId = post.image_id || null;\n    \n    // Business-specific enhancements\n    const businessType = post.business_type || 'general';\n    let enhancedContent = content;\n    \n    // Add business-specific CTAs if not present\n    if (!content.includes('📞') && !content.includes('🔗') && !content.includes('Visit')) {\n      switch(businessType) {\n        case 'restaurant':\n        case 'cafe':\n          if (!content.includes('Order') && !content.includes('Reserve')) {\n            enhancedContent += '\\n📞 Call for reservations';\n          }\n          break;\n        case 'retail':\n        case 'ecommerce':\n          if (!content.includes('Shop') && !content.includes('Buy')) {\n            enhancedContent += '\\n🛍️ Shop now - link in bio';\n          }\n          break;\n        case 'service':\n          if (!content.includes('Book') && !content.includes('Schedule')) {\n            enhancedContent += '\\n📅 Book your appointment today';\n          }\n          break;\n        case 'professional':\n          if (!content.includes('Learn') && !content.includes('Contact')) {\n            enhancedContent += '\\n💼 Learn more - link in bio';\n          }\n          break;\n        case 'fitness':\n        case 'gym':\n          if (!content.includes('Join') && !content.includes('Sign up')) {\n            enhancedContent += '\\n💪 Join us today!';\n          }\n          break;\n      }\n    }\n    \n    // Prepare platform-specific versions\n    const platformVersions = {};\n    \n    // Instagram version\n    if (platforms.includes('instagram')) {\n      platformVersions.instagram = {\n        content: enhancedContent + (hashtags ? '\\n\\n' + hashtags : ''),\n        imageUrl: imageUrl,\n        imageId: imageId,\n        requiresImage: true, // Instagram works best with images\n        type: post.post_type || 'feed'\n      };\n    }\n    \n    // Facebook version\n    if (platforms.includes('facebook')) {\n      platformVersions.facebook = {\n        content: enhancedContent, // Facebook: hashtags less important\n        imageUrl: imageUrl,\n        imageId: imageId,\n        link: post.link_url || null,\n        type: post.post_type || 'feed'\n      };\n    }\n    \n    // Twitter/X version\n    if (platforms.includes('twitter')) {\n      // Twitter has 280 character limit\n      let twitterContent = enhancedContent;\n      if (twitterContent.length > 260) { // Leave room for link\n        twitterContent = twitterContent.substring(0, 257) + '...';\n      }\n      platformVersions.twitter = {\n        content: twitterContent + (hashtags ? ' ' + hashtags.split(' ').slice(0, 3).join(' ') : ''),\n        imageUrl: imageUrl,\n        imageId: imageId,\n        type: 'tweet'\n      };\n    }\n    \n    // LinkedIn version (if applicable)\n    if (platforms.includes('linkedin')) {\n      platformVersions.linkedin = {\n        content: enhancedContent + (hashtags ? '\\n\\n' + hashtags : ''),\n        imageUrl: imageUrl,\n        imageId: imageId,\n        type: 'post',\n        professional: true\n      };\n    }\n    \n    // Google Business version (if applicable)\n    if (platforms.includes('google')) {\n      platformVersions.google = {\n        content: enhancedContent.substring(0, 1500), // Google has 1500 char limit\n        imageUrl: imageUrl,\n        imageId: imageId,\n        type: 'update',\n        callToAction: post.google_cta || 'LEARN_MORE'\n      };\n    }\n    \n    preparedPosts.push({\n      originalPost: post,\n      timestamp: post.timestamp,\n      businessType: businessType,\n      priority: post.priority || 'medium',\n      platformVersions: platformVersions,\n      platforms: platforms,\n      hasImage: !!imageUrl,\n      imageNeedsDownload: imageUrl && imageUrl.includes('drive.google.com'),\n      publishTime: now.toISOString()\n    });\n  }\n});\n\n// Sort by priority (high > medium > low)\nconst priorityOrder = { high: 0, medium: 1, low: 2 };\npreparedPosts.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);\n\n// Limit to 5 posts per run to avoid rate limits\nreturn preparedPosts.slice(0, 5).map(post => ({ json: post }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300],
      "id": "prepare-platform-content",
      "name": "Prepare Platform Content"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.imageNeedsDownload }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [900, 300],
      "id": "check-image-download",
      "name": "Check Image Download"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "download",
        "fileId": "={{ $json.originalPost.image_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [1120, 200],
      "id": "download-image",
      "name": "Download Image from Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "GOOGLE_DRIVE_CRED_ID",
          "name": "Google Drive"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.platforms.includes('instagram') }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              },
              "outputKey": "instagram"
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.platforms.includes('facebook') }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              },
              "outputKey": "facebook"
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.platforms.includes('twitter') }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              },
              "outputKey": "twitter"
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.platforms.includes('linkedin') }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              },
              "outputKey": "linkedin"
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.platforms.includes('google') }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              },
              "outputKey": "google"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1340, 300],
      "id": "route-to-platforms",
      "name": "Route to Platforms"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.instagram.com/v18.0/{{ $credentials.instagramBusinessAccountId }}/media",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.instagramAccessToken }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "caption",
              "value": "={{ $json.platformVersions.instagram.content }}"
            },
            {
              "name": "image_url",
              "value": "={{ $json.hasImage ? $json.originalPost.image_url : 'https://via.placeholder.com/1080x1080' }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 200],
      "id": "post-to-instagram",
      "name": "Post to Instagram",
      "credentials": {
        "httpHeaderAuth": {
          "id": "INSTAGRAM_CRED_ID",
          "name": "Instagram API"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "pageId": "{{ $credentials.facebookPageId }}",
        "content": "={{ $json.platformVersions.facebook.content }}",
        "additionalFields": {
          "link": "={{ $json.platformVersions.facebook.link }}",
          "published": true
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.facebookPages",
      "typeVersion": 1,
      "position": [1560, 300],
      "id": "post-to-facebook",
      "name": "Post to Facebook",
      "credentials": {
        "facebookPagesOAuth2Api": {
          "id": "FACEBOOK_CRED_ID",
          "name": "Facebook Pages"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "text": "={{ $json.platformVersions.twitter.content }}",
        "additionalFields": {},
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.twitter",
      "typeVersion": 2,
      "position": [1560, 400],
      "id": "post-to-twitter",
      "name": "Post to Twitter/X",
      "credentials": {
        "twitterOAuth2Api": {
          "id": "TWITTER_CRED_ID",
          "name": "Twitter API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "authentication": "oAuth2",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Restli-Protocol-Version",
              "value": "2.0.0"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"author\": \"urn:li:organization:{{ $credentials.linkedinOrganizationId }}\",\n  \"lifecycleState\": \"PUBLISHED\",\n  \"specificContent\": {\n    \"com.linkedin.ugc.ShareContent\": {\n      \"shareCommentary\": {\n        \"text\": \"{{ $json.platformVersions.linkedin.content }}\"\n      },\n      \"shareMediaCategory\": \"NONE\"\n    }\n  },\n  \"visibility\": {\n    \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n  }\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 500],
      "id": "post-to-linkedin",
      "name": "Post to LinkedIn",
      "credentials": {
        "linkedInOAuth2Api": {
          "id": "LINKEDIN_CRED_ID",
          "name": "LinkedIn API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mybusiness.googleapis.com/v4/accounts/{{ $credentials.googleBusinessAccountId }}/locations/{{ $credentials.googleBusinessLocationId }}/localPosts",
        "authentication": "oAuth2",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"summary\": \"{{ $json.platformVersions.google.content }}\",\n  \"callToAction\": {\n    \"actionType\": \"{{ $json.platformVersions.google.callToAction }}\",\n    \"url\": \"{{ $json.originalPost.link_url || $credentials.businessWebsite }}\"\n  },\n  \"topicType\": \"STANDARD\"\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 600],
      "id": "post-to-google",
      "name": "Post to Google Business",
      "credentials": {
        "googleOAuth2Api": {
          "id": "GOOGLE_BUSINESS_CRED_ID",
          "name": "Google Business API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combine results from all platforms\nconst originalData = $('prepare-platform-content').item;\nconst results = {\n  timestamp: originalData.timestamp,\n  publishTime: new Date().toISOString(),\n  success: [],\n  failed: [],\n  platforms: {}\n};\n\n// Check each platform result\nconst platformNodes = [\n  { name: 'instagram', node: 'post-to-instagram' },\n  { name: 'facebook', node: 'post-to-facebook' },\n  { name: 'twitter', node: 'post-to-twitter' },\n  { name: 'linkedin', node: 'post-to-linkedin' },\n  { name: 'google', node: 'post-to-google' }\n];\n\nplatformNodes.forEach(platform => {\n  try {\n    const result = $(platform.node).first()?.json;\n    if (result && !result.error) {\n      results.success.push(platform.name);\n      results.platforms[platform.name] = {\n        status: 'success',\n        postId: result.id || result.data?.id,\n        url: result.permalink || result.url\n      };\n    } else if (result) {\n      results.failed.push(platform.name);\n      results.platforms[platform.name] = {\n        status: 'failed',\n        error: result.error?.message || 'Unknown error'\n      };\n    }\n  } catch (error) {\n    // Platform wasn't attempted\n  }\n});\n\nresults.overallStatus = results.failed.length === 0 ? 'success' : \n                        results.success.length > 0 ? 'partial' : 'failed';\n\nreturn [{\n  json: {\n    ...originalData.originalPost,\n    publishResults: results\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 400],
      "id": "combine-results",
      "name": "Combine Results"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "value": "CLIENT_CONTENT_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Generated_Content",
          "mode": "string"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "published": "={{ $json.publishResults.overallStatus === 'failed' ? 'false' : 'true' }}",
            "published_at": "={{ $json.publishResults.publishTime }}",
            "publish_status": "={{ $json.publishResults.overallStatus }}",
            "successful_platforms": "={{ $json.publishResults.success.join(', ') }}",
            "failed_platforms": "={{ $json.publishResults.failed.join(', ') }}",
            "platform_results": "={{ JSON.stringify($json.publishResults.platforms) }}"
          }
        },
        "filters": {
          "conditions": [
            {
              "column": "timestamp",
              "condition": "equal",
              "value": "={{ $json.timestamp }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [2000, 400],
      "id": "update-publish-status",
      "name": "Update Publish Status",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "chatId": "CLIENT_TELEGRAM_CHAT_ID",
        "text": "{{ $json.publishResults.overallStatus === 'success' ? '✅' : $json.publishResults.overallStatus === 'partial' ? '⚠️' : '❌' }} Publishing Update\n\n📝 Content: {{ $json.content.substring(0, 100) }}...\n⏰ Published: {{ new Date($json.publishResults.publishTime).toLocaleString() }}\n\n{{ $json.publishResults.success.length > 0 ? '✅ Success: ' + $json.publishResults.success.join(', ') + '\\n' : '' }}{{ $json.publishResults.failed.length > 0 ? '❌ Failed: ' + $json.publishResults.failed.join(', ') : '' }}\n\n{{ $json.publishResults.overallStatus === 'success' ? '🎉 All platforms posted successfully!' : $json.publishResults.overallStatus === 'partial' ? '⚡ Some platforms need attention' : '🔧 Publishing failed - please check manually' }}",
        "additionalFields": {
          "parse_mode": "Markdown",
          "disable_notification": "{{ $json.publishResults.overallStatus === 'success' }}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [2220, 400],
      "id": "notify-publish-result",
      "name": "Notify Publish Result",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "content": "ENHANCED MULTI-PLATFORM PUBLISHER\n\nSUPPORTED PLATFORMS:\n✅ Instagram (Business Account)\n✅ Facebook Pages\n✅ Twitter/X\n✅ LinkedIn (Company Pages)\n✅ Google Business Profile\n\nIMAGE HANDLING:\n• Downloads from Google Drive if needed\n• Fallback to placeholder if no image\n• Platform-specific image requirements\n• Automatic image URL formatting\n\nCONTENT OPTIMIZATION:\n• Platform-specific character limits\n• Twitter: 280 chars max\n• Instagram: Full content + hashtags\n• Facebook: No hashtag emphasis\n• LinkedIn: Professional tone\n• Google: 1500 char limit\n\nBUSINESS-SPECIFIC CTAs:\n• Restaurant: \"Call for reservations\"\n• Retail: \"Shop now - link in bio\"\n• Service: \"Book your appointment\"\n• Professional: \"Learn more\"\n• Fitness: \"Join us today\"\n\nRATE LIMITING:\n• Max 5 posts per 30-minute run\n• Priority-based ordering\n• Prevents API throttling\n\nERROR HANDLING:\n• Never fails entire workflow\n• Reports per-platform status\n• Partial success tracking\n• Detailed error logging",
        "height": 400,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [240, 700],
      "id": "enhanced-publisher-notes",
      "name": "Enhanced Publisher Instructions"
    }
  ],
  "connections": {
    "Check Every 30 Minutes": {
      "main": [
        [
          {
            "node": "Get Approved Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Approved Content": {
      "main": [
        [
          {
            "node": "Prepare Platform Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Platform Content": {
      "main": [
        [
          {
            "node": "Check Image Download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Image Download": {
      "main": [
        [
          {
            "node": "Download Image from Drive",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Route to Platforms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image from Drive": {
      "main": [
        [
          {
            "node": "Route to Platforms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Platforms": {
      "main": [
        {
          "instagram": [
            {
              "node": "Post to Instagram",
              "type": "main",
              "index": 0
            }
          ],
          "facebook": [
            {
              "node": "Post to Facebook",
              "type": "main",
              "index": 0
            }
          ],
          "twitter": [
            {
              "node": "Post to Twitter/X",
              "type": "main",
              "index": 0
            }
          ],
          "linkedin": [
            {
              "node": "Post to LinkedIn",
              "type": "main",
              "index": 0
            }
          ],
          "google": [
            {
              "node": "Post to Google Business",
              "type": "main",
              "index": 0
            }
          ]
        }
      ]
    },
    "Post to Instagram": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Facebook": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Twitter/X": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to LinkedIn": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Google Business": {
      "main": [
        [
          {
            "node": "Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Results": {
      "main": [
        [
          {
            "node": "Update Publish Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Publish Status": {
      "main": [
        [
          {
            "node": "Notify Publish Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "saveExecutionProgress": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all"
  },
  "meta": {
    "instanceId": "enhanced-multi-platform-publisher"
  },
  "tags": []
}