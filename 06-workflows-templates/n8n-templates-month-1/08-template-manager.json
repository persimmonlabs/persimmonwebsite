{
  "name": "Template Manager - Basic",
  "nodes": [
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "value": "TEMPLATE_UPDATES_CHANNEL_ID",
          "mode": "string"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "template-update-email",
      "name": "Template Update Email",
      "credentials": {
        "gmailOAuth2": {
          "id": "GMAIL_CRED_ID",
          "name": "Gmail"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse template update request from email\nconst emailSubject = $json.subject || '';\nconst emailBody = $json.bodyText || $json.snippet || '';\nconst fromEmail = $json.from || '';\n\n// Extract template information\nconst templateInfo = {\n  requestId: `template_${Date.now()}`,\n  fromEmail: fromEmail.match(/<(.+)>/)?.[1] || fromEmail,\n  fromName: fromEmail.split('<')[0].trim() || 'Unknown',\n  subject: emailSubject,\n  body: emailBody,\n  requestDate: new Date().toISOString(),\n  status: 'pending',\n  templateType: 'custom',\n  clientId: null,\n  originalMessageId: $json.id\n};\n\n// Try to identify template type from subject/body\nif (emailSubject.toLowerCase().includes('pre-match') || emailBody.toLowerCase().includes('pre-match')) {\n  templateInfo.templateType = 'pre-match';\n} else if (emailSubject.toLowerCase().includes('match day') || emailBody.toLowerCase().includes('match day')) {\n  templateInfo.templateType = 'match-day';\n} else if (emailSubject.toLowerCase().includes('result') || emailBody.toLowerCase().includes('result')) {\n  templateInfo.templateType = 'match-result';\n} else if (emailSubject.toLowerCase().includes('practice') || emailBody.toLowerCase().includes('practice')) {\n  templateInfo.templateType = 'practice';\n} else if (emailSubject.toLowerCase().includes('motivational') || emailBody.toLowerCase().includes('motivational')) {\n  templateInfo.templateType = 'motivational';\n}\n\n// Try to extract client ID from email\nconst clientIdMatch = emailBody.match(/client[_\\s]*id[_\\s]*:?[_\\s]*(\\w+)/i);\nif (clientIdMatch) {\n  templateInfo.clientId = clientIdMatch[1];\n}\n\n// Extract any specific template content\nconst templateContentMatch = emailBody.match(/template[_\\s]*content[_\\s]*:([\\s\\S]*?)(?:\\n\\n|$)/i);\nif (templateContentMatch) {\n  templateInfo.templateContent = templateContentMatch[1].trim();\n}\n\nreturn [{ json: templateInfo }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "id": "parse-template-request",
      "name": "Parse Template Request"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "value": "TEMPLATE_REQUESTS_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Template_Requests",
          "mode": "string"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "request_id": "={{ $json.requestId }}",
            "request_date": "={{ $json.requestDate }}",
            "from_email": "={{ $json.fromEmail }}",
            "from_name": "={{ $json.fromName }}",
            "client_id": "={{ $json.clientId }}",
            "template_type": "={{ $json.templateType }}",
            "status": "={{ $json.status }}",
            "subject": "={{ $json.subject }}",
            "request_details": "={{ $json.body.substring(0, 500) + '...' }}",
            "template_content": "={{ $json.templateContent || 'Not specified' }}"
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [680, 300],
      "id": "log-template-request",
      "name": "Log Template Request",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a social media content template specialist for sports teams. Create engaging, professional templates based on the user's request.\n\nTemplate Type: {{ $json.templateType }}\nRequest Details: {{ $json.body }}\nSpecific Content: {{ $json.templateContent || 'General template requested' }}\n\nGuidelines:\n- Keep templates under 280 characters for multi-platform use\n- Include placeholder variables in {{brackets}} for dynamic content\n- Use appropriate emojis (1-2 maximum)\n- Include relevant hashtags\n- Make it sound authentic and energetic\n- Provide 3 variations of the template\n\nProvide the output as JSON with this structure:\n{\n  \"templates\": [\n    {\n      \"variation\": 1,\n      \"content\": \"Template content here with {{variables}}\",\n      \"hashtags\": \"#hashtag1 #hashtag2\",\n      \"platform_notes\": \"Best for Instagram/Twitter/Facebook\"\n    },\n    // ... 2 more variations\n  ]\n}"
            },
            {
              "role": "user",
              "content": "Create {{ $json.templateType }} templates based on this request: {{ $json.body }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [900, 300],
      "id": "generate-templates",
      "name": "Generate Templates",
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CRED_ID",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI-generated templates and prepare for storage\nconst requestData = $('parse-template-request').item;\nconst aiResponse = $json.choices[0].message.content;\n\nlet templates = [];\ntry {\n  const parsedResponse = JSON.parse(aiResponse);\n  templates = parsedResponse.templates || [];\n} catch (error) {\n  // Fallback: try to extract templates from plain text\n  const lines = aiResponse.split('\\n').filter(line => line.trim());\n  templates = [\n    {\n      variation: 1,\n      content: lines[0] || 'Template generation failed',\n      hashtags: '#sports #team',\n      platform_notes: 'General use'\n    }\n  ];\n}\n\n// Prepare template data for storage\nconst templateData = templates.map((template, index) => ({\n  requestId: requestData.requestId,\n  templateType: requestData.templateType,\n  clientId: requestData.clientId,\n  variation: template.variation || (index + 1),\n  content: template.content,\n  hashtags: template.hashtags,\n  platformNotes: template.platform_notes,\n  createdDate: new Date().toISOString(),\n  status: 'generated',\n  usageCount: 0,\n  fromRequest: {\n    email: requestData.fromEmail,\n    name: requestData.fromName,\n    originalSubject: requestData.subject\n  }\n}));\n\nreturn templateData.map(template => ({ json: template }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300],
      "id": "process-generated-templates",
      "name": "Process Generated Templates"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "value": "TEMPLATES_MASTER_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Content_Templates",
          "mode": "string"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "template_id": "={{ $json.requestId + '_v' + $json.variation }}",
            "request_id": "={{ $json.requestId }}",
            "template_type": "={{ $json.templateType }}",
            "client_id": "={{ $json.clientId }}",
            "variation": "={{ $json.variation }}",
            "content": "={{ $json.content }}",
            "hashtags": "={{ $json.hashtags }}",
            "platform_notes": "={{ $json.platformNotes }}",
            "created_date": "={{ $json.createdDate }}",
            "status": "{{ $json.status }}",
            "usage_count": "{{ $json.usageCount }}",
            "created_by": "={{ $json.fromRequest.name }} ({{ $json.fromRequest.email }})"
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [1340, 300],
      "id": "save-templates",
      "name": "Save Templates",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "value": "TEMPLATE_REQUESTS_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Template_Requests",
          "mode": "string"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "status": "completed",
            "completed_date": "={{ new Date().toISOString() }}",
            "templates_generated": "={{ $('process-generated-templates').all().length }}"
          }
        },
        "filters": {
          "conditions": [
            {
              "column": "request_id",
              "condition": "equal",
              "value": "={{ $json.requestId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [1560, 300],
      "id": "update-request-status",
      "name": "Update Request Status",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "to": "={{ $json.fromRequest.email }}",
        "subject": "✅ Your custom templates are ready! ({{ $json.templateType }})",
        "emailType": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .header { background: #f8f9fa; padding: 20px; text-align: center; }\n        .content { padding: 20px; }\n        .template { background: #f1f3f4; padding: 15px; margin: 15px 0; border-left: 4px solid #4285f4; }\n        .template-content { font-style: italic; background: white; padding: 10px; margin: 10px 0; border-radius: 5px; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>🎾 Your Custom Templates Are Ready!</h1>\n        <p>{{ $json.templateType }} templates for {{ $json.clientId || 'your team' }}</p>\n    </div>\n    \n    <div class=\"content\">\n        <p>Hi {{ $json.fromRequest.name }},</p>\n        \n        <p>Great news! We've created {{ $('process-generated-templates').all().length }} custom {{ $json.templateType }} template variations based on your request.</p>\n        \n        {{ $('process-generated-templates').all().map(template => `\n        <div class=\"template\">\n            <h3>Template Variation ${template.json.variation}</h3>\n            <div class=\"template-content\">\n                ${template.json.content}<br>\n                ${template.json.hashtags}\n            </div>\n            <p><strong>Best for:</strong> ${template.json.platformNotes}</p>\n        </div>`).join('') }}\n        \n        <h2>How to Use These Templates:</h2>\n        <ol>\n            <li>✅ Templates are now active in your content generation system</li>\n            <li>✅ They'll be used automatically when creating {{ $json.templateType }} posts</li>\n            <li>✅ Variables like {{team}}, {{opponent}}, {{date}} will be filled automatically</li>\n            <li>✅ You can still edit any generated content before approval</li>\n        </ol>\n        \n        <p><strong>Need adjustments?</strong> Just reply to this email with your feedback and we'll refine the templates.</p>\n        \n        <p>Thanks for helping us create better content for your team!</p>\n        \n        <p>Best,<br>\nThe Persimmon Labs Team</p>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 1,
      "position": [1780, 300],
      "id": "send-templates-email",
      "name": "Send Templates Email",
      "credentials": {
        "gmailOAuth2": {
          "id": "GMAIL_CRED_ID",
          "name": "Gmail"
        }
      }
    },
    {
      "parameters": {
        "chatId": "ADMIN_TELEGRAM_CHAT_ID",
        "text": "📝 NEW TEMPLATES GENERATED!\n\n📧 Request from: {{ $json.fromRequest.name }} ({{ $json.fromRequest.email }})\n🎯 Template Type: {{ $json.templateType }}\n👤 Client ID: {{ $json.clientId || 'Not specified' }}\n📅 Generated: {{ new Date().toLocaleDateString() }}\n\n🔢 Templates Created: {{ $('process-generated-templates').all().length }} variations\n\n📋 Template Preview:\n{{ $('process-generated-templates').first().json.content }}\n{{ $('process-generated-templates').first().json.hashtags }}\n\n✅ Templates saved to TEMPLATES_MASTER_SHEET_ID\n📧 Confirmation email sent to requester\n🔄 Templates now available for content generation",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [2000, 300],
      "id": "notify-admin",
      "name": "Notify Admin",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * 1"
            }
          ]
        }
      },
      "id": "weekly-template-review",
      "name": "Weekly Template Review",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 600]
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "value": "TEMPLATES_MASTER_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Content_Templates",
          "mode": "string"
        },
        "options": {
          "returnAll": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [460, 600],
      "id": "get-all-templates",
      "name": "Get All Templates",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Analyze template usage and performance\nconst templates = $json;\nconst weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n\n// Group by type and analyze usage\nconst typeStats = {};\nconst lowUsageTemplates = [];\nconst highUsageTemplates = [];\nconst newTemplates = [];\n\ntemplates.forEach(template => {\n  const type = template.template_type;\n  const usage = parseInt(template.usage_count) || 0;\n  const createdDate = new Date(template.created_date);\n  \n  // Initialize type stats\n  if (!typeStats[type]) {\n    typeStats[type] = {\n      totalTemplates: 0,\n      totalUsage: 0,\n      averageUsage: 0,\n      mostUsed: { content: '', usage: 0 },\n      leastUsed: { content: '', usage: 999 }\n    };\n  }\n  \n  typeStats[type].totalTemplates++;\n  typeStats[type].totalUsage += usage;\n  \n  // Track most and least used\n  if (usage > typeStats[type].mostUsed.usage) {\n    typeStats[type].mostUsed = {\n      content: template.content.substring(0, 60) + '...',\n      usage\n    };\n  }\n  if (usage < typeStats[type].leastUsed.usage) {\n    typeStats[type].leastUsed = {\n      content: template.content.substring(0, 60) + '...',\n      usage\n    };\n  }\n  \n  // Categorize templates\n  if (createdDate > weekAgo) {\n    newTemplates.push({\n      type,\n      content: template.content.substring(0, 80) + '...',\n      createdBy: template.created_by\n    });\n  }\n  \n  if (usage === 0 && createdDate < weekAgo) {\n    lowUsageTemplates.push({\n      templateId: template.template_id,\n      type,\n      content: template.content.substring(0, 60) + '...',\n      daysSinceCreated: Math.floor((new Date() - createdDate) / (1000 * 60 * 60 * 24))\n    });\n  }\n  \n  if (usage > 10) {\n    highUsageTemplates.push({\n      templateId: template.template_id,\n      type,\n      content: template.content.substring(0, 60) + '...',\n      usage\n    });\n  }\n});\n\n// Calculate averages\nObject.keys(typeStats).forEach(type => {\n  typeStats[type].averageUsage = Math.round(typeStats[type].totalUsage / typeStats[type].totalTemplates);\n});\n\nreturn [{\n  json: {\n    reportDate: new Date().toISOString().split('T')[0],\n    totalTemplates: templates.length,\n    typeStats,\n    newTemplates: newTemplates.slice(0, 5), // Top 5 new\n    lowUsageTemplates: lowUsageTemplates.slice(0, 5), // Top 5 unused\n    highUsageTemplates: highUsageTemplates.slice(0, 5), // Top 5 popular\n    recommendations: {\n      createMore: Object.entries(typeStats).sort((a, b) => b[1].averageUsage - a[1].averageUsage)[0]?.[0] || 'none',\n      reviewUnused: lowUsageTemplates.length,\n      totalTypes: Object.keys(typeStats).length\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 600],
      "id": "analyze-template-usage",
      "name": "Analyze Template Usage"
    },
    {
      "parameters": {
        "chatId": "ADMIN_TELEGRAM_CHAT_ID",
        "text": "📊 WEEKLY TEMPLATE REPORT - {{ $json.reportDate }}\n\n📈 Overview:\n• Total Templates: {{ $json.totalTemplates }}\n• Template Types: {{ $json.recommendations.totalTypes }}\n• New This Week: {{ $json.newTemplates.length }}\n• Unused Templates: {{ $json.recommendations.reviewUnused }}\n\n🏆 Performance by Type:\n{{ Object.entries($json.typeStats).map(([type, stats]) => `\\n${type.toUpperCase()}:\\n• Templates: ${stats.totalTemplates}\\n• Avg Usage: ${stats.averageUsage}\\n• Most Used: ${stats.mostUsed.content} (${stats.mostUsed.usage}x)\\n• Least Used: ${stats.leastUsed.content} (${stats.leastUsed.usage}x)`).join('\\n') }}\n\n{{ $json.newTemplates.length > 0 ? '✨ NEW TEMPLATES:\\n' + $json.newTemplates.map(t => `• ${t.type}: ${t.content} (by ${t.createdBy})`).join('\\n') + '\\n\\n' : '' }}{{ $json.lowUsageTemplates.length > 0 ? '⚠️ UNUSED TEMPLATES (consider review):\\n' + $json.lowUsageTemplates.map(t => `• ${t.type}: ${t.content} (${t.daysSinceCreated} days old)`).join('\\n') + '\\n\\n' : '' }}🎯 RECOMMENDATION: Create more {{ $json.recommendations.createMore }} templates (highest usage)\n\n📋 Full template data: TEMPLATES_MASTER_SHEET_ID",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [900, 600],
      "id": "send-weekly-template-report",
      "name": "Send Weekly Template Report",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "content": "TEMPLATE MANAGEMENT SYSTEM:\n\nEMAIL-TRIGGERED TEMPLATE CREATION:\n✅ Send email to templates@persimmonlabs.com\n✅ AI generates 3 template variations\n✅ Templates saved to master sheet\n✅ Auto-confirmation email sent\n✅ Admin notification via Telegram\n\nTEMPLATE TYPES SUPPORTED:\n• pre-match: Day before game content\n• match-day: Game day posts\n• match-result: Post-game results\n• practice: Practice motivation\n• motivational: General inspiration\n• custom: Any other type\n\nEMAIL FORMAT EXAMPLE:\nTo: templates@persimmonlabs.com\nSubject: New pre-match template request\nBody:\nClient ID: client_123\nTemplate Type: pre-match\nTemplate Content: Create excitement for tomorrow's match against [opponent]\n\nVARIABLES SUPPORTED:\n{{team}}, {{opponent}}, {{date}}, {{time}}, {{venue}}, {{score}}, {{player}}\n\nWEEKLY ANALYTICS:\n📊 Template usage statistics\n📈 Performance by type\n⚠️ Unused template alerts\n🎯 Creation recommendations\n\nSETUP:\n1. Create templates@persimmonlabs.com email\n2. Set up Gmail trigger for template email\n3. Create TEMPLATE_REQUESTS_SHEET_ID\n4. Create TEMPLATES_MASTER_SHEET_ID\n5. Test with sample template request\n\nThis system allows clients and team to easily request custom templates while maintaining organized template library.",
        "height": 400,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [240, 900],
      "id": "template-manager-notes",
      "name": "Template Manager Instructions"
    }
  ],
  "connections": {
    "Template Update Email": {
      "main": [
        [
          {
            "node": "Parse Template Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Template Request": {
      "main": [
        [
          {
            "node": "Log Template Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Template Request": {
      "main": [
        [
          {
            "node": "Generate Templates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Templates": {
      "main": [
        [
          {
            "node": "Process Generated Templates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Generated Templates": {
      "main": [
        [
          {
            "node": "Save Templates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Templates": {
      "main": [
        [
          {
            "node": "Update Request Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Request Status": {
      "main": [
        [
          {
            "node": "Send Templates Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Templates Email": {
      "main": [
        [
          {
            "node": "Notify Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Weekly Template Review": {
      "main": [
        [
          {
            "node": "Get All Templates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Templates": {
      "main": [
        [
          {
            "node": "Analyze Template Usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Template Usage": {
      "main": [
        [
          {
            "node": "Send Weekly Template Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "saveExecutionProgress": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all"
  },
  "meta": {
    "instanceId": "template-manager-basic"
  },
  "tags": []
}