{
  "name": "Analytics Collector - Basic",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 20 * * *"
            }
          ]
        }
      },
      "id": "nightly-trigger",
      "name": "Nightly 8 PM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "value": "CLIENTS_MASTER_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Clients",
          "mode": "string"
        },
        "filters": {
          "conditions": [
            {
              "column": "status",
              "condition": "equal",
              "value": "active"
            }
          ]
        },
        "options": {
          "returnAll": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [460, 300],
      "id": "get-active-clients",
      "name": "Get Active Clients",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "value": "={{ $json.content_sheet_id }}",
          "mode": "string"
        },
        "sheetName": {
          "value": "Generated_Content",
          "mode": "string"
        },
        "filters": {
          "conditions": [
            {
              "column": "published",
              "condition": "equal",
              "value": "true"
            },
            {
              "column": "analytics_collected",
              "condition": "notEqual",
              "value": "true"
            }
          ]
        },
        "options": {
          "returnAll": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [680, 300],
      "id": "get-published-posts",
      "name": "Get Published Posts",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse platform results and prepare for analytics collection\nconst clientInfo = $('get-active-clients').item;\nconst posts = $json;\nconst analyticsData = [];\n\nposts.forEach(post => {\n  try {\n    // Parse platform results JSON\n    const platformResults = JSON.parse(post.platform_results || '{}');\n    \n    // Extract post IDs for different platforms\n    const postData = {\n      clientId: clientInfo.client_id,\n      clientName: clientInfo.name,\n      teamName: clientInfo.team_name,\n      postId: post.timestamp, // Using timestamp as unique identifier\n      content: post.content,\n      postType: post.post_type,\n      publishedAt: post.published_at,\n      platforms: post.platforms?.split(',') || [],\n      instagramPostId: null,\n      twitterPostId: null,\n      facebookPostId: null,\n      contentSheetId: clientInfo.content_sheet_id,\n      originalRowData: post\n    };\n    \n    // Try to extract platform-specific IDs from results\n    if (platformResults.instagram?.id) {\n      postData.instagramPostId = platformResults.instagram.id;\n    }\n    if (platformResults.twitter?.data?.id) {\n      postData.twitterPostId = platformResults.twitter.data.id;\n    }\n    if (platformResults.facebook?.id) {\n      postData.facebookPostId = platformResults.facebook.id;\n    }\n    \n    analyticsData.push(postData);\n  } catch (error) {\n    console.log(`Error parsing post data: ${error.message}`);\n  }\n});\n\nreturn analyticsData.map(data => ({ json: data }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300],
      "id": "prepare-analytics-data",
      "name": "Prepare Analytics Data"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://graph.instagram.com/v18.0/{{ $json.instagramPostId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.instagramAccessToken }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "fields",
              "value": "id,media_type,media_url,permalink,timestamp,like_count,comments_count,shares_count,reach,impressions"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 200],
      "id": "get-instagram-analytics",
      "name": "Get Instagram Analytics",
      "credentials": {
        "httpHeaderAuth": {
          "id": "INSTAGRAM_CRED_ID",
          "name": "Instagram API"
        }
      }
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.twitter.com/2/tweets/{{ $json.twitterPostId }}",
        "authentication": "oAuth2",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "tweet.fields",
              "value": "created_at,public_metrics,context_annotations"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 300],
      "id": "get-twitter-analytics",
      "name": "Get Twitter Analytics",
      "credentials": {
        "twitterOAuth2Api": {
          "id": "TWITTER_CRED_ID",
          "name": "Twitter API"
        }
      }
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://graph.facebook.com/v18.0/{{ $json.facebookPostId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.facebookAccessToken }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "fields",
              "value": "id,created_time,message,permalink_url,reactions.summary(true),comments.summary(true),shares"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 400],
      "id": "get-facebook-analytics",
      "name": "Get Facebook Analytics",
      "credentials": {
        "httpHeaderAuth": {
          "id": "FACEBOOK_CRED_ID",
          "name": "Facebook API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combine analytics data from all platforms\nconst originalData = $('prepare-analytics-data').item;\nconst instagramData = $('get-instagram-analytics').first()?.json;\nconst twitterData = $('get-twitter-analytics').first()?.json;\nconst facebookData = $('get-facebook-analytics').first()?.json;\n\n// Initialize analytics object\nconst analytics = {\n  ...originalData,\n  collectionDate: new Date().toISOString(),\n  platforms: {\n    instagram: null,\n    twitter: null,\n    facebook: null\n  },\n  totalEngagement: 0,\n  totalReach: 0,\n  totalImpressions: 0,\n  bestPerformingPlatform: null\n};\n\n// Process Instagram data\nif (instagramData && !instagramData.error) {\n  analytics.platforms.instagram = {\n    likes: instagramData.like_count || 0,\n    comments: instagramData.comments_count || 0,\n    shares: instagramData.shares_count || 0,\n    reach: instagramData.reach || 0,\n    impressions: instagramData.impressions || 0,\n    engagement: (instagramData.like_count || 0) + (instagramData.comments_count || 0) + (instagramData.shares_count || 0),\n    permalink: instagramData.permalink\n  };\n}\n\n// Process Twitter data\nif (twitterData?.data && !twitterData.error) {\n  const metrics = twitterData.data.public_metrics || {};\n  analytics.platforms.twitter = {\n    likes: metrics.like_count || 0,\n    retweets: metrics.retweet_count || 0,\n    replies: metrics.reply_count || 0,\n    quotes: metrics.quote_count || 0,\n    impressions: metrics.impression_count || 0,\n    engagement: (metrics.like_count || 0) + (metrics.retweet_count || 0) + (metrics.reply_count || 0) + (metrics.quote_count || 0)\n  };\n}\n\n// Process Facebook data\nif (facebookData && !facebookData.error) {\n  analytics.platforms.facebook = {\n    reactions: facebookData.reactions?.summary?.total_count || 0,\n    comments: facebookData.comments?.summary?.total_count || 0,\n    shares: facebookData.shares?.count || 0,\n    engagement: (facebookData.reactions?.summary?.total_count || 0) + (facebookData.comments?.summary?.total_count || 0) + (facebookData.shares?.count || 0),\n    permalink: facebookData.permalink_url\n  };\n}\n\n// Calculate totals\nObject.values(analytics.platforms).forEach(platform => {\n  if (platform) {\n    analytics.totalEngagement += platform.engagement || 0;\n    analytics.totalReach += platform.reach || 0;\n    analytics.totalImpressions += platform.impressions || 0;\n  }\n});\n\n// Find best performing platform\nlet maxEngagement = 0;\nObject.entries(analytics.platforms).forEach(([platformName, data]) => {\n  if (data && data.engagement > maxEngagement) {\n    maxEngagement = data.engagement;\n    analytics.bestPerformingPlatform = platformName;\n  }\n});\n\nreturn [{ json: analytics }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300],
      "id": "combine-analytics",
      "name": "Combine Analytics"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "value": "ANALYTICS_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Post_Analytics",
          "mode": "string"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "collection_date": "={{ $json.collectionDate }}",
            "client_id": "={{ $json.clientId }}",
            "client_name": "={{ $json.clientName }}",
            "team_name": "={{ $json.teamName }}",
            "post_id": "={{ $json.postId }}",
            "content_preview": "={{ $json.content.substring(0, 100) }}",
            "post_type": "={{ $json.postType }}",
            "published_at": "={{ $json.publishedAt }}",\n            "platforms": "={{ $json.platforms.join(', ') }}",\n            \"instagram_likes\": \"={{ $json.platforms.instagram?.likes || 0 }}\",\n            \"instagram_comments\": \"={{ $json.platforms.instagram?.comments || 0 }}\",\n            \"instagram_shares\": \"={{ $json.platforms.instagram?.shares || 0 }}\",\n            \"instagram_reach\": \"={{ $json.platforms.instagram?.reach || 0 }}\",\n            \"twitter_likes\": \"={{ $json.platforms.twitter?.likes || 0 }}\",\n            \"twitter_retweets\": \"={{ $json.platforms.twitter?.retweets || 0 }}\",\n            \"twitter_replies\": \"={{ $json.platforms.twitter?.replies || 0 }}\",\n            \"facebook_reactions\": \"={{ $json.platforms.facebook?.reactions || 0 }}\",\n            \"facebook_comments\": \"={{ $json.platforms.facebook?.comments || 0 }}\",\n            \"facebook_shares\": \"={{ $json.platforms.facebook?.shares || 0 }}\",\n            \"total_engagement\": \"={{ $json.totalEngagement }}\",\n            \"total_reach\": \"={{ $json.totalReach }}\",\n            \"total_impressions\": \"={{ $json.totalImpressions }}\",\n            \"best_platform\": \"={{ $json.bestPerformingPlatform }}\"\n          }\n        }\n      },\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"typeVersion\": 4.2,\n      \"position\": [1560, 300],\n      \"id\": \"save-analytics\",\n      \"name\": \"Save Analytics\",\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"GOOGLE_SHEETS_CRED_ID\",\n          \"name\": \"Google Sheets\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"update\",\n        \"documentId\": {\n          \"value\": \"={{ $json.contentSheetId }}\",\n          \"mode\": \"string\"\n        },\n        \"sheetName\": {\n          \"value\": \"Generated_Content\",\n          \"mode\": \"string\"\n        },\n        \"columns\": {\n          \"mappingMode\": \"defineBelow\",\n          \"value\": {\n            \"analytics_collected\": \"true\",\n            \"analytics_date\": \"={{ $json.collectionDate }}\",\n            \"total_engagement\": \"={{ $json.totalEngagement }}\",\n            \"best_platform\": \"={{ $json.bestPerformingPlatform }}\"\n          }\n        },\n        \"filters\": {\n          \"conditions\": [\n            {\n              \"column\": \"timestamp\",\n              \"condition\": \"equal\",\n              \"value\": \"={{ $json.postId }}\"\n            }\n          ]\n        }\n      },\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"typeVersion\": 4.2,\n      \"position\": [1780, 300],\n      \"id\": \"mark-analytics-collected\",\n      \"name\": \"Mark Analytics Collected\",\n      \"credentials\": {\n        \"googleSheetsOAuth2Api\": {\n          \"id\": \"GOOGLE_SHEETS_CRED_ID\",\n          \"name\": \"Google Sheets\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Create weekly analytics summary\\nconst allAnalytics = $('combine-analytics').all();\\n\\nif (allAnalytics.length === 0) {\\n  return [{ json: { hasData: false } }];\\n}\\n\\n// Group by client\\nconst clientSummaries = {};\\nallAnalytics.forEach(item => {\\n  const data = item.json;\\n  const clientId = data.clientId;\\n  \\n  if (!clientSummaries[clientId]) {\\n    clientSummaries[clientId] = {\\n      clientName: data.clientName,\\n      teamName: data.teamName,\\n      totalPosts: 0,\\n      totalEngagement: 0,\\n      totalReach: 0,\\n      totalImpressions: 0,\\n      bestPosts: [],\\n      platformBreakdown: {\\n        instagram: { posts: 0, engagement: 0 },\\n        twitter: { posts: 0, engagement: 0 },\\n        facebook: { posts: 0, engagement: 0 }\\n      }\\n    };\\n  }\\n  \\n  const summary = clientSummaries[clientId];\\n  summary.totalPosts++;\\n  summary.totalEngagement += data.totalEngagement;\\n  summary.totalReach += data.totalReach;\\n  summary.totalImpressions += data.totalImpressions;\\n  \\n  // Track platform performance\\n  data.platforms.forEach(platform => {\\n    if (summary.platformBreakdown[platform]) {\\n      summary.platformBreakdown[platform].posts++;\\n      summary.platformBreakdown[platform].engagement += data.platforms[platform]?.engagement || 0;\\n    }\\n  });\\n  \\n  // Track best performing posts (top 3)\\n  summary.bestPosts.push({\\n    content: data.content.substring(0, 80) + '...',\\n    engagement: data.totalEngagement,\\n    platform: data.bestPerformingPlatform\\n  });\\n});\\n\\n// Sort best posts and keep top 3 per client\\nObject.values(clientSummaries).forEach(summary => {\\n  summary.bestPosts.sort((a, b) => b.engagement - a.engagement);\\n  summary.bestPosts = summary.bestPosts.slice(0, 3);\\n});\\n\\nreturn [{\\n  json: {\\n    hasData: true,\\n    reportDate: new Date().toISOString().split('T')[0],\\n    totalClients: Object.keys(clientSummaries).length,\\n    clientSummaries\\n  }\\n}];\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [1560, 500],\n      \"id\": \"create-weekly-summary\",\n      \"name\": \"Create Weekly Summary\"\n    },\n    {\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"conditions\": {\n                \"conditions\": [\n                  {\n                    \"leftValue\": \"={{ new Date().getDay() }}\",\n                    \"rightValue\": \"0\",\n                    \"operator\": {\n                      \"type\": \"number\",\n                      \"operation\": \"equal\"\n                    }\n                  },\n                  {\n                    \"leftValue\": \"={{ $json.hasData }}\",\n                    \"rightValue\": \"true\",\n                    \"operator\": {\n                      \"type\": \"boolean\",\n                      \"operation\": \"equal\"\n                    }\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      },\n      \"type\": \"n8n-nodes-base.switch\",\n      \"typeVersion\": 3,\n      \"position\": [1780, 500],\n      \"id\": \"check-if-sunday\",\n      \"name\": \"Check if Sunday\"\n    },\n    {\n      \"parameters\": {\n        \"chatId\": \"ADMIN_TELEGRAM_CHAT_ID\",\n        \"text\": \"📊 WEEKLY ANALYTICS REPORT - {{ $json.reportDate }}\\n\\n📈 Overview:\\n• Total Clients: {{ $json.totalClients }}\\n• Posts Analyzed: {{ Object.values($json.clientSummaries).reduce((sum, c) => sum + c.totalPosts, 0) }}\\n• Total Engagement: {{ Object.values($json.clientSummaries).reduce((sum, c) => sum + c.totalEngagement, 0) }}\\n\\n{{ Object.entries($json.clientSummaries).map(([id, client]) => `\\n🏆 ${client.teamName}:\\n• Posts: ${client.totalPosts}\\n• Engagement: ${client.totalEngagement}\\n• Reach: ${client.totalReach}\\n• Best Platform: ${Object.entries(client.platformBreakdown).sort((a, b) => b[1].engagement - a[1].engagement)[0][0]}\\n• Top Post: ${client.bestPosts[0]?.content || 'None'} (${client.bestPosts[0]?.engagement || 0} engagement)`).join('') }}\\n\\n📱 Platform Performance:\\n{{ Object.entries($json.clientSummaries).length > 0 ? Object.keys($json.clientSummaries)[0] : 'No data' }}\\n\\n🔍 Full analytics available in ANALYTICS_SHEET_ID\",\n        \"additionalFields\": {\n          \"parse_mode\": \"Markdown\"\n        }\n      },\n      \"type\": \"n8n-nodes-base.telegram\",\n      \"typeVersion\": 1,\n      \"position\": [2000, 500],\n      \"id\": \"send-weekly-report\",\n      \"name\": \"Send Weekly Report\",\n      \"credentials\": {\n        \"telegramApi\": {\n          \"id\": \"TELEGRAM_CRED_ID\",\n          \"name\": \"Telegram Bot\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"content\": \"ANALYTICS COLLECTION SYSTEM:\\n\\nRuns nightly at 8 PM to collect post performance data:\\n\\nDATA COLLECTED:\\n📊 Instagram: Likes, comments, shares, reach, impressions\\n📊 Twitter: Likes, retweets, replies, quotes, impressions\\n📊 Facebook: Reactions, comments, shares\\n\\nFEATURES:\\n✅ Automatic collection for published posts\\n✅ Platform comparison and best performer identification\\n✅ Weekly summary reports (Sundays)\\n✅ Client-specific analytics tracking\\n✅ Engagement rate calculations\\n\\nDATA STORAGE:\\n• ANALYTICS_SHEET_ID: Raw analytics data\\n• Original content sheet: Updated with analytics flags\\n• Weekly summaries via Telegram\\n\\nSETUP REQUIREMENTS:\\n1. Get API access tokens for each platform\\n2. Create ANALYTICS_SHEET_ID with proper columns\\n3. Ensure content sheets have analytics_collected column\\n4. Test with sample published posts\\n\\nAPI LIMITS:\\n• Instagram: 200 calls/hour\\n• Twitter: 300 calls/15 min\\n• Facebook: 200 calls/hour\\n\\nThis provides data-driven insights for content optimization and client reporting.\",\n        \"height\": 400,\n        \"width\": 400\n      },\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"typeVersion\": 1,\n      \"position\": [240, 700],\n      \"id\": \"analytics-notes\",\n      \"name\": \"Analytics Instructions\"\n    }\n  ],\n  \"connections\": {\n    \"Nightly 8 PM\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Active Clients\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Active Clients\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Published Posts\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Published Posts\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prepare Analytics Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare Analytics Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Instagram Analytics\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Get Twitter Analytics\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Get Facebook Analytics\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Instagram Analytics\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine Analytics\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Twitter Analytics\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine Analytics\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Facebook Analytics\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Combine Analytics\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Combine Analytics\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Save Analytics\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Save Analytics\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Mark Analytics Collected\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Create Weekly Summary\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Create Weekly Summary\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check if Sunday\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if Sunday\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Weekly Report\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"pinData\": {},\n  \"settings\": {\n    \"saveExecutionProgress\": true,\n    \"saveDataErrorExecution\": \"all\",\n    \"saveDataSuccessExecution\": \"all\"\n  },\n  \"meta\": {\n    \"instanceId\": \"analytics-collector\"\n  },\n  \"tags\": []\n}"