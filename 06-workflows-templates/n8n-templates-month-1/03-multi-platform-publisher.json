{
  "name": "Multi-Platform Publisher - Basic",
  "nodes": [
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "value": "CLIENT_CONTENT_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Generated_Content",
          "mode": "string"
        },
        "filters": {
          "conditions": [
            {
              "column": "status",
              "condition": "equal",
              "value": "approved"
            },
            {
              "column": "published",
              "condition": "equal", 
              "value": "false"
            }
          ]
        },
        "options": {
          "returnAll": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [240, 300],
      "id": "get-approved-content",
      "name": "Get Approved Content",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Filter content ready for publishing\nconst content = $json;\nconst now = new Date();\nconst readyToPost = [];\n\ncontent.forEach(item => {\n  const scheduleTime = new Date(item.scheduled_time || item.timestamp);\n  \n  // Check if it's time to post (within 30 minutes)\n  const timeDiff = Math.abs(now.getTime() - scheduleTime.getTime());\n  const thirtyMinutes = 30 * 60 * 1000;\n  \n  if (timeDiff <= thirtyMinutes || !item.scheduled_time) {\n    readyToPost.push({\n      ...item,\n      platforms: (item.platforms || 'instagram,twitter').split(','),\n      content: item.content.trim(),\n      hashtags: item.hashtags || '#tennis #sports',\n      image_url: item.image_url || null\n    });\n  }\n});\n\nreturn readyToPost.map(post => ({ json: post }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "id": "filter-ready-posts",
      "name": "Filter Ready Posts"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.platforms.includes('instagram') }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              }
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.platforms.includes('twitter') }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              }
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{ $json.platforms.includes('facebook') }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "equal"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [680, 300],
      "id": "route-by-platform",
      "name": "Route by Platform"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.instagram.com/v18.0/IG_USER_ID/media",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.instagramAccessToken }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "image_url",
              "value": "={{ $json.image_url || 'https://example.com/default-tennis.jpg' }}"
            },
            {
              "name": "caption",
              "value": "={{ $json.content }}\n\n{{ $json.hashtags }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 200],
      "id": "post-to-instagram",
      "name": "Post to Instagram",
      "credentials": {
        "httpHeaderAuth": {
          "id": "INSTAGRAM_CRED_ID",
          "name": "Instagram API"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "text": "={{ $json.content }}\n\n{{ $json.hashtags }}",
        "additionalFields": {
          "media_ids": "={{ $json.image_url ? [$json.image_url] : [] }}"
        }
      },
      "type": "n8n-nodes-base.twitter",
      "typeVersion": 2,
      "position": [900, 300],
      "id": "post-to-twitter",
      "name": "Post to Twitter",
      "credentials": {
        "twitterOAuth2Api": {
          "id": "TWITTER_CRED_ID",
          "name": "Twitter API"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "pageId": "FACEBOOK_PAGE_ID",
        "content": "={{ $json.content }}\n\n{{ $json.hashtags }}",
        "additionalFields": {
          "link": "={{ $json.image_url }}"
        }
      },
      "type": "n8n-nodes-base.facebookPages",
      "typeVersion": 1,
      "position": [900, 400],
      "id": "post-to-facebook",
      "name": "Post to Facebook",
      "credentials": {
        "facebookPagesOAuth2Api": {
          "id": "FACEBOOK_CRED_ID",
          "name": "Facebook Pages"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "value": "CLIENT_CONTENT_SHEET_ID",
          "mode": "string"
        },
        "sheetName": {
          "value": "Generated_Content",
          "mode": "string"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "published": "true",
            "published_at": "={{ new Date().toISOString() }}",
            "platform_results": "={{ JSON.stringify($json) }}"
          }
        },
        "filters": {
          "conditions": [
            {
              "column": "timestamp",
              "condition": "equal",
              "value": "={{ $json.timestamp }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.2,
      "position": [1120, 300],
      "id": "mark-as-published",
      "name": "Mark as Published",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "GOOGLE_SHEETS_CRED_ID",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "chatId": "CLIENT_TELEGRAM_CHAT_ID",
        "text": "âœ… Post published successfully!\n\n{{ $json.content }}\n\nPlatforms: {{ $json.platforms.join(', ') }}\nPublished at: {{ new Date().toLocaleString() }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1340, 300],
      "id": "notify-success",
      "name": "Notify Success",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "ADMIN_TELEGRAM_CHAT_ID",
        "text": "ðŸš¨ Publishing failed!\n\nContent: {{ $json.content }}\nError: {{ $json.error }}\nTime: {{ new Date().toISOString() }}\n\nPlease check and retry manually.",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1340, 500],
      "id": "notify-error",
      "name": "Notify Error",
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CRED_ID",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "content": "MULTI-PLATFORM PUBLISHER:\n\nPublishes approved content to:\nâœ… Instagram (with images)\nâœ… Twitter (with media)\nâœ… Facebook (with links)\n\nSETUP:\n1. Get API credentials for each platform\n2. Replace CLIENT_CONTENT_SHEET_ID\n3. Set FACEBOOK_PAGE_ID\n4. Test with sample approved content\n\nSCHEDULING:\n- Runs when content is approved\n- Checks scheduled_time column\n- Posts within 30-minute window\n- Marks as published in sheet\n\nERROR HANDLING:\n- Notifies admin on failures\n- Logs platform responses\n- Allows manual retry",
        "height": 300,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [240, 480],
      "id": "publisher-notes",
      "name": "Publisher Instructions"
    }
  ],
  "connections": {
    "Get Approved Content": {
      "main": [
        [
          {
            "node": "Filter Ready Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Ready Posts": {
      "main": [
        [
          {
            "node": "Route by Platform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Platform": {
      "main": [
        [
          {
            "node": "Post to Instagram",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Post to Twitter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Post to Facebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Instagram": {
      "main": [
        [
          {
            "node": "Mark as Published",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Twitter": {
      "main": [
        [
          {
            "node": "Mark as Published",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Facebook": {
      "main": [
        [
          {
            "node": "Mark as Published",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Published": {
      "main": [
        [
          {
            "node": "Notify Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "saveExecutionProgress": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all"
  },
  "meta": {
    "instanceId": "multi-platform-publisher"
  },
  "tags": []
}