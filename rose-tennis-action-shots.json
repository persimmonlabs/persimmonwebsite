{
    "name": "RH Tennis Social Orchestrator (All-in-One)",
    "nodes": [
      {
        "parameters": {
          "rule": {
            "interval": [
              {
                "field": "cronExpression",
                "expression": "*/15 * * * *"
              }
            ]
          }
        },
        "id": "cron-15m",
        "name": "Every 15 min (ET)",
        "type": "n8n-nodes-base.scheduleTrigger",
        "typeVersion": 1,
        "position": [-1280, -500]
      },
      {
        "parameters": {
          "operation": "read",
          "documentId": {
            "__rl": true,
            "value": "https://docs.google.com/spreadsheets/d/1ti-mergZ3iVq7ZC1z73DXOuKbplJgXMaf99v9fVyH8Q",
            "mode": "url"
          },
          "sheetName": {
            "__rl": true,
            "value": 404683817,
            "mode": "list",
            "cachedResultName": "Schedule",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ti-mergZ3iVq7ZC1z73DXOuKbplJgXMaf99v9fVyH8Q/edit#gid=404683817"
          },
          "options": {
            "returnAll": true
          }
        },
        "type": "n8n-nodes-base.googleSheets",
        "typeVersion": 4.7,
        "position": [-1050, -500],
        "id": "read-schedule",
        "name": "Read Schedule",
        "credentials": {
          "googleSheetsOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Sheets account"
          }
        }
      },
      {
        "parameters": {
          "operation": "read",
          "documentId": {
            "value": "OPS_SHEET_ID",
            "mode": "string"
          },
          "sheetName": {
            "value": "Posts_Log",
            "mode": "string"
          },
          "options": {
            "returnAll": true
          }
        },
        "type": "n8n-nodes-base.googleSheets",
        "typeVersion": 4,
        "position": [-1050, -280],
        "id": "read-postslog",
        "name": "Read Posts_Log",
        "credentials": {
          "googleSheetsOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Sheets account"
          }
        }
      },
      {
        "parameters": {
          "operation": "read",
          "documentId": {
            "value": "OPS_SHEET_ID",
            "mode": "string"
          },
          "sheetName": {
            "value": "Manager_Inputs",
            "mode": "string"
          },
          "options": {
            "returnAll": true
          }
        },
        "type": "n8n-nodes-base.googleSheets",
        "typeVersion": 4,
        "position": [-1050, -60],
        "id": "read-manager",
        "name": "Read Manager_Inputs",
        "credentials": {
          "googleSheetsOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Sheets account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Master Orchestrator\n// Inputs from: Read Schedule, Read Posts_Log, Read Manager_Inputs\n// Emits actions: T_MINUS_1_DAY, T_MINUS_1_HOUR, SCORE, HIGHLIGHT\n\nfunction parseDate(s){\n  // Accepts '9/6/2025' or ISO\n  const d = new Date(s);\n  if (!isNaN(d)) return d;\n  return new Date(String(s));\n}\nfunction ymd(d){return new Date(d.getFullYear(), d.getMonth(), d.getDate());}\nfunction toISODate(d){return d.toISOString().slice(0,10);} // UTC date string\n\n// Collect rows by upstream node names\nconst schedRows = $items(\"Read Schedule\", 0, 0).map(i=>i.json);\nconst logRows = $items(\"Read Posts_Log\", 0, 0).map(i=>i.json);\n\n// Idempotency keys (date__type__match_id)\nconst usedKeys = new Set();\nfor (const r of logRows){\n  const date = (r.date||r.Date||'').toString().slice(0,10);\n  const type = (r.post_type||r.Post_Type||'').toString();\n  const mid = (r.match_id||r.Match_ID||'').toString();\n  if(date && type){ usedKeys.add(`${date}__${type}__${mid}`); }\n}\n\n// Now in America/Indiana/Indianapolis-ish: rely on server local; use offsets conservatively\nconst now = new Date();\nconst today = ymd(now);\nconst tomorrow = new Date(today.getTime()+24*60*60*1000);\n\nfunction notPosted(dateStr, type, matchId){\n  return !usedKeys.has(`${dateStr}__${type}__${matchId}`);\n}\n\nfunction normalize(r){\n  const d = parseDate(r.date||r.Date||'');\n  const dateISO = toISODate(d);\n  const time_local = (r.time_local||r.Time_Local||'').toString();\n  let dt = null;\n  if(time_local){\n    const [hh,mm] = time_local.split(':');\n    dt = new Date(d.getFullYear(), d.getMonth(), d.getDate(), parseInt(hh||'0',10), parseInt(mm||'0',10));\n  }\n  const team = (r.team||r.Team||'').toString();\n  return {\n    dateISO,\n    dt,\n    time_local,\n    team,\n    opponent: (r.opponent||r.Opponent||'').toString(),\n    site: (r.site||r.Site||'').toString(),\n    venue: (r.venue||r.Venue||'').toString(),\n    conference: (r.conference||r.Conference||'').toString(),\n    notes: (r.notes||r.Notes||'').toString(),\n    match_id: (r.match_id||r.Match_ID||`${dateISO}_${team}_${r.opponent||''}`).toString()\n  };\n}\n\nconst schedule = schedRows.map(normalize);\n\nconst actions = [];\n\nfor (const m of schedule){\n  // PREMATCH: day before\n  const mDate = new Date(m.dateISO+'T00:00:00Z');\n  const mLocalDateStr = m.dateISO; // for idempotency\n  const todayStr = toISODate(today);\n  const tomorrowStr = toISODate(tomorrow);\n\n  if (mLocalDateStr === tomorrowStr) {\n    if (notPosted(mLocalDateStr, 'T-1day', m.match_id)) {\n      actions.push({ type: 'T_MINUS_1_DAY', payload: m });\n    }\n  }\n\n  // MATCHDAY: ~1 hour before start\n  if (m.dt instanceof Date && !isNaN(m.dt)){\n    const diffMin = (m.dt - now) / 60000;\n    if (diffMin <= 75 && diffMin >= 30) {\n      if (notPosted(mLocalDateStr, 'T-1hour', m.match_id)) {\n        actions.push({ type: 'T_MINUS_1_HOUR', payload: m });\n      }\n    }\n\n    // SCORE/HIGHLIGHT: after match (2h to 48h window)\n    const postWindowMin = (now - m.dt)/60000;\n    if (postWindowMin > 120 && postWindowMin < 2880) {\n      if (notPosted(mLocalDateStr, 'SCORE', m.match_id)) {\n        actions.push({ type: 'SCORE', payload: m });\n      }\n      if (notPosted(mLocalDateStr, 'HIGHLIGHT', m.match_id)) {\n        actions.push({ type: 'HIGHLIGHT', payload: m });\n      }\n    }\n  }\n}\n\nif (actions.length === 0){\n  actions.push({ type: 'FILLER', payload: { reason: 'no_due_actions', now: now.toISOString() } });\n}\n\nreturn actions.map(a=>({json:a}));\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [-820, -500],
        "id": "orchestrate",
        "name": "Orchestrate"
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "conditions": [
                    {
                      "leftValue": "={{$json.type}}",
                      "rightValue": "T_MINUS_1_DAY",
                      "operator": { "type": "string", "operation": "equals" }
                    }
                  ]
                }
              },
              {
                "conditions": {
                  "conditions": [
                    {
                      "leftValue": "={{$json.type}}",
                      "rightValue": "T_MINUS_1_HOUR",
                      "operator": { "type": "string", "operation": "equals" }
                    }
                  ]
                }
              },
              {
                "conditions": {
                  "conditions": [
                    {
                      "leftValue": "={{$json.type}}",
                      "rightValue": "SCORE",
                      "operator": { "type": "string", "operation": "equals" }
                    }
                  ]
                }
              },
              {
                "conditions": {
                  "conditions": [
                    {
                      "leftValue": "={{$json.type}}",
                      "rightValue": "HIGHLIGHT",
                      "operator": { "type": "string", "operation": "equals" }
                    }
                  ]
                }
              }
            ]
          }
        },
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [-590, -500],
        "id": "switch-type",
        "name": "Route by Type"
      },
  
      {
        "parameters": {
          "resource": "fileFolder",
          "operation": "list",
          "useQueryString": true,
          "queryString": "='ACTION_SHOTS_FOLDER_ID' in parents and mimeType contains 'image/'",
          "options": { "returnAll": true }
        },
        "id": "list-actionshots",
        "name": "List Action Shots",
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [-360, -700],
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Drive account"
          }
        }
      },
      {
        "parameters": {
          "resource": "fileFolder",
          "operation": "list",
          "useQueryString": true,
          "queryString": "='GAMEDAY_DECKS_FOLDER_ID' in parents and mimeType = 'application/vnd.google-apps.presentation'",
          "options": { "returnAll": true }
        },
        "id": "list-gameday-decks",
        "name": "List Gameday Decks (Pre-Match)",
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [-360, -600],
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Drive account"
          }
        }
      },
      {
        "parameters": {
          "resource": "fileFolder",
          "operation": "list",
          "useQueryString": true,
          "queryString": "='MATCHDAY_DECKS_FOLDER_ID' in parents and mimeType = 'application/vnd.google-apps.presentation'",
          "options": { "returnAll": true }
        },
        "id": "list-matchday-decks",
        "name": "List Match-Day Decks",
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [-360, -520],
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Drive account"
          }
        }
      },
      {
        "parameters": {
          "resource": "fileFolder",
          "operation": "list",
          "useQueryString": true,
          "queryString": "='SCORE_DECKS_FOLDER_ID' in parents and mimeType = 'application/vnd.google-apps.presentation'",
          "options": { "returnAll": true }
        },
        "id": "list-score-decks",
        "name": "List Score Decks",
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [-360, -440],
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Drive account"
          }
        }
      },
      {
        "parameters": {
          "resource": "fileFolder",
          "operation": "list",
          "useQueryString": true,
          "queryString": "='HIGHLIGHT_DECKS_FOLDER_ID' in parents and mimeType = 'application/vnd.google-apps.presentation'",
          "options": { "returnAll": true }
        },
        "id": "list-highlight-decks",
        "name": "List Highlight Decks",
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [-360, -360],
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Drive account"
          }
        }
      },
  
      {
        "parameters": {
          "jsCode": "// Weighted action-shot selection (least-used players first)\\n// Uses Posts_Log counts for T-1day + T-1hour\\nconst driveFiles = $items(\\\"List Action Shots\\\",0,0).map(i=>i.json);\\nconst logs = $items(\\\"Read Posts_Log\\\",0,0).map(i=>i.json);\\n\\nfunction extractPlayer(filename){\\n  const base = filename.replace(/\\.[^.]+$/, '');\\n  // common separators\\n  return base.replace(/[_-]+/g, ' ').trim();\\n}\\n\\n// Count appearances by player in pre/matchday\\nconst counts = new Map();\\nfor(const r of logs){\\n  const t = (r.post_type||'').toLowerCase();\\n  if(t==='t-1day' || t==='t-1hour'){\\n    const name = (r.player_name||'').trim();\\n    if(!name) continue;\\n    counts.set(name, (counts.get(name)||0)+1);\\n  }\\n}\\n\\n// Bucket files by player\\nconst byPlayer = new Map();\\nfor(const f of driveFiles){\\n  const p = extractPlayer(f.name);\\n  if(!byPlayer.has(p)) byPlayer.set(p, []);\\n  byPlayer.get(p).push(f);\\n}\\n\\n// Find min count players\\nlet min = Infinity;\\nfor(const p of byPlayer.keys()){\\n  const c = counts.get(p)||0;\\n  if(c<min) min=c;\\n}\\nconst candidatesPlayers = [...byPlayer.keys()].filter(p => (counts.get(p)||0)===min);\\nconst pickedPlayer = candidatesPlayers[Math.floor(Math.random()*candidatesPlayers.length)];\\nconst files = byPlayer.get(pickedPlayer)||driveFiles;\\nconst pickedFile = files[Math.floor(Math.random()*files.length)];\\n\\nreturn [{ json: { selectedPhoto: { id: pickedFile.id, name: pickedFile.name }, player_name: pickedPlayer, payload: $json.payload, type: $json.type } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [-90, -640],
        "id": "pick-photo-weighted",
        "name": "Select Weighted Action Shot"
      },
  
      {
        "parameters": {
          "jsCode": "const decks = $items(\"List Gameday Decks (Pre-Match)\",0,0).map(i=>i.json);\\nconst deck = decks[Math.floor(Math.random()*Math.max(1,decks.length))];\\nconst p = $json.payload||{};\\nconst player = $json.player_name||'';\\nconst tokens = {\\n  DATE: p.dateISO||'',\\n  TIME: p.time_local||'',\\n  TEAM: p.team||'',\\n  OPPONENT: p.opponent||'',\\n  SITE: p.site||'',\\n  VENUE: p.venue||'',\\n  CONFERENCE: p.conference||'',\\n  PLAYER: player,\\n  HEADLINE: `GAMEDAY: ${p.team} vs ${p.opponent}`\\n};\\nreturn [{json:{ deckId: deck.id, tokens, selectedPhoto: $json.selectedPhoto, slideIndex: 0, payload: p, type: 'T-1day', player_name: player }}];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [130, -700],
        "id": "prematch-build-tokens",
        "name": "Pre-Match: Build Tokens"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "GET",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId }}",
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [360, -700],
        "id": "prematch-get-pres",
        "name": "Slides: Get Presentation (Pre-Match)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "const pres = $json;\\nconst slideId = (pres.slides && pres.slides[0] && pres.slides[0].objectId) ? pres.slides[0].objectId : null;\\nreturn [{ json: { deckId: $items(0,0)[0].json.deckId, slideId, tokens: $items(\"Pre-Match: Build Tokens\",0,0)[0].json.tokens, selectedPhoto: $items(\"Pre-Match: Build Tokens\",0,0)[0].json.selectedPhoto, payload: $items(\"Pre-Match: Build Tokens\",0,0)[0].json.payload, player_name: $items(\"Pre-Match: Build Tokens\",0,0)[0].json.player_name } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [580, -700],
        "id": "prematch-pick-slide",
        "name": "Pre-Match: Pick Slide"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "POST",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId + ':batchUpdate' }}",
          "jsonParameters": true,
          "options": {},
          "bodyParametersJson": "={{ { requests: [\n  ...Object.entries($json.tokens).filter(([k,v])=>typeof v==='string').map(([k,v])=>({\n    replaceAllText: {\n      containsText: { text: '{{'+k+'}}', matchCase: false },\n      replaceText: v\n    }\n  })),\n  {\n    replaceAllShapesWithImage: {\n      imageUrl: 'https://www.googleapis.com/drive/v3/files/' + $json.selectedPhoto.id + '?alt=media',\n      containsText: { text: '{{PHOTO}}', matchCase: false }\n    }\n  }\n] } }}",
          "sendHeaders": true
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [820, -700],
        "id": "prematch-replace",
        "name": "Slides: Replace Tokens + Photo (Pre-Match)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "GET",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId + '/pages/' + $json.slideId + '/thumbnail?thumbnailProperties.thumbnailSize=LARGE&mimeType=PNG' }}",
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [1060, -700],
        "id": "prematch-get-thumb",
        "name": "Slides: Get Thumbnail (Pre-Match)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "authentication": "none",
          "requestMethod": "GET",
          "url": "={{ $json.contentUrl }}",
          "options": {
            "response": {
              "responseFormat": "file",
              "binaryPropertyName": "data"
            }
          }
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [1280, -700],
        "id": "prematch-dl-thumb",
        "name": "Download PNG (Pre-Match)"
      },
      {
        "parameters": {
          "operation": "upload",
          "binaryData": true,
          "fileName": "={{ $json.payload.match_id + '_prematch.png' }}",
          "additionalFields": {
            "parents": ["OUTBOX_FOLDER_ID"]
          }
        },
        "id": "prematch-upload",
        "name": "Upload to Outbox (Pre-Match)",
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [1500, -700],
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Drive account"
          }
        }
      },
      {
        "parameters": {
          "operation": "appendOrUpdate",
          "documentId": {
            "value": "OPS_SHEET_ID",
            "mode": "string"
          },
          "sheetName": {
            "value": "Posts_Log",
            "mode": "string"
          },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "timestamp": "={{ new Date().toISOString() }}",
              "season": "={{ ($json.payload.dateISO||'').slice(0,4) + '-' + (parseInt(($json.payload.dateISO||'').slice(0,4))+1) }}",
              "date": "={{ $json.payload.dateISO }}",
              "post_type": "T-1day",
              "platform": "instagram",
              "photo_fileId": "={{ $json.selectedPhoto.id }}",
              "photo_name": "={{ $json.selectedPhoto.name }}",
              "player_name": "={{ $json.player_name || '' }}",
              "match_id": "={{ $json.payload.match_id }}",
              "slides_template_fileId": "={{ $json.deckId }}",
              "slideObjectId": "={{ $json.slideId }}",
              "export_fileId": "={{ $json.id || '' }}",
              "status": "rendered"
            }
          }
        },
        "type": "n8n-nodes-base.googleSheets",
        "typeVersion": 4,
        "position": [1720, -700],
        "id": "prematch-log",
        "name": "Append Posts_Log (Pre-Match)",
        "credentials": {
          "googleSheetsOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Sheets account"
          }
        }
      },
  
      {
        "parameters": {
          "jsCode": "const decks = $items(\"List Match-Day Decks\",0,0).map(i=>i.json);\\nconst deck = decks[Math.floor(Math.random()*Math.max(1,decks.length))];\\nconst p = $json.payload||{};\\nconst player = $json.player_name||'';\\nconst tokens = {\\n  DATE: p.dateISO||'',\\n  TIME: p.time_local||'',\\n  TEAM: p.team||'',\\n  OPPONENT: p.opponent||'',\\n  SITE: p.site||'',\\n  VENUE: p.venue||'',\\n  CONFERENCE: p.conference||'',\\n  PLAYER: player,\\n  HEADLINE: `MATCH DAY: ${p.team} vs ${p.opponent}`\\n};\\nreturn [{json:{ deckId: deck.id, tokens, selectedPhoto: $json.selectedPhoto, slideIndex: 0, payload: p, player_name: player }}];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [130, -560],
        "id": "matchday-build-tokens",
        "name": "Match-Day: Build Tokens"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "GET",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId }}"
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [360, -560],
        "id": "matchday-get-pres",
        "name": "Slides: Get Presentation (Match-Day)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "const pres = $json;\\nconst slideId = (pres.slides && pres.slides[0] && pres.slides[0].objectId) ? pres.slides[0].objectId : null;\\nreturn [{ json: { deckId: $items(0,0)[0].json.deckId, slideId, tokens: $items(\"Match-Day: Build Tokens\",0,0)[0].json.tokens, selectedPhoto: $items(\"Match-Day: Build Tokens\",0,0)[0].json.selectedPhoto, payload: $items(\"Match-Day: Build Tokens\",0,0)[0].json.payload, player_name: $items(\"Match-Day: Build Tokens\",0,0)[0].json.player_name } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [580, -560],
        "id": "matchday-pick-slide",
        "name": "Match-Day: Pick Slide"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "POST",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId + ':batchUpdate' }}",
          "jsonParameters": true,
          "bodyParametersJson": "={{ { requests: [\n  ...Object.entries($json.tokens).map(([k,v])=>({ replaceAllText: { containsText: { text: '{{'+k+'}}', matchCase: false }, replaceText: String(v||'') } })),\n  { replaceAllShapesWithImage: { imageUrl: 'https://www.googleapis.com/drive/v3/files/' + $json.selectedPhoto.id + '?alt=media', containsText: { text: '{{PHOTO}}', matchCase: false } } }\n] } }}"
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [820, -560],
        "id": "matchday-replace",
        "name": "Slides: Replace Tokens + Photo (Match-Day)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "GET",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId + '/pages/' + $json.slideId + '/thumbnail?thumbnailProperties.thumbnailSize=LARGE&mimeType=PNG' }}"
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [1060, -560],
        "id": "matchday-get-thumb",
        "name": "Slides: Get Thumbnail (Match-Day)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "authentication": "none",
          "requestMethod": "GET",
          "url": "={{ $json.contentUrl }}",
          "options": {
            "response": { "responseFormat": "file", "binaryPropertyName": "data" }
          }
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [1280, -560],
        "id": "matchday-dl-thumb",
        "name": "Download PNG (Match-Day)"
      },
      {
        "parameters": {
          "operation": "upload",
          "binaryData": true,
          "fileName": "={{ $json.payload.match_id + '_matchday.png' }}",
          "additionalFields": { "parents": ["OUTBOX_FOLDER_ID"] }
        },
        "id": "matchday-upload",
        "name": "Upload to Outbox (Match-Day)",
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [1500, -560],
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Drive account"
          }
        }
      },
      {
        "parameters": {
          "operation": "appendOrUpdate",
          "documentId": { "value": "OPS_SHEET_ID", "mode": "string" },
          "sheetName": { "value": "Posts_Log", "mode": "string" },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "timestamp": "={{ new Date().toISOString() }}",
              "season": "={{ ($json.payload.dateISO||'').slice(0,4) + '-' + (parseInt(($json.payload.dateISO||'').slice(0,4))+1) }}",
              "date": "={{ $json.payload.dateISO }}",
              "post_type": "T-1hour",
              "platform": "instagram",
              "photo_fileId": "={{ $json.selectedPhoto.id }}",
              "photo_name": "={{ $json.selectedPhoto.name }}",
              "player_name": "={{ $json.player_name || '' }}",
              "match_id": "={{ $json.payload.match_id }}",
              "slides_template_fileId": "={{ $json.deckId }}",
              "slideObjectId": "={{ $json.slideId }}",
              "export_fileId": "={{ $json.id || '' }}",
              "status": "rendered"
            }
          }
        },
        "type": "n8n-nodes-base.googleSheets",
        "typeVersion": 4,
        "position": [1720, -560],
        "id": "matchday-log",
        "name": "Append Posts_Log (Match-Day)",
        "credentials": {
          "googleSheetsOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Sheets account"
          }
        }
      },
  
      {
        "parameters": {
          "jsCode": "// Lookup Manager Inputs for this match\\nconst mid = ($json.payload||{}).match_id;\\nconst rows = $items(\\\"Read Manager_Inputs\\\",0,0).map(i=>i.json);\\nconst found = rows.find(r => (r.match_id||r.Match_ID||'').toString() === String(mid));\\nreturn [{ json: { manager: found||null, payload: $json.payload, type: $json.type } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [-120, -280],
        "id": "lookup-manager",
        "name": "Lookup Manager Input"
      },
      {
        "parameters": {
          "conditions": {
            "options": {},
            "conditions": [
              {
                "leftValue": "={{$json.manager && ($json.manager.score_text || $json.manager.article_url || $json.manager.highlight_player || $json.manager.highlight_text)}}",
                "rightValue": "",
                "operator": {
                  "type": "string",
                  "operation": "notEqual"
                }
              }
            ]
          }
        },
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [100, -280],
        "id": "if-has-manager",
        "name": "Has Manager Data?"
      },
  
      {
        "parameters": {
          "url": "={{ $json.payload.team && $json.payload.team.toLowerCase().includes('women') ? 'https://athletics.rose-hulman.edu/rss?path=wtens' : 'https://athletics.rose-hulman.edu/rss?path=mtens' }}",
          "options": {
            "returnAll": true
          }
        },
        "id": "rss-read",
        "name": "RSS Feed Read (Tennis)",
        "type": "n8n-nodes-base.rssFeedRead",
        "typeVersion": 1,
        "position": [320, -180]
      },
      {
        "parameters": {
          "jsCode": "const items = $json.items || [];\\nconst p = $items(\\\"Lookup Manager Input\\\",0,0)[0].json.payload;\\nconst targetOpp = (p.opponent||'').toLowerCase();\\nconst targetDate = (p.dateISO||'');\\nfunction scoreTitleScore(t){return t.toLowerCase().includes(targetOpp);}\\n// Prefer titles containing opponent; else newest\\nlet best = items.find(it => scoreTitleScore((it.title||''))) || items[0];\\nreturn [{ json: { articleUrl: (best && best.link) || '', payload: p } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [540, -180],
        "id": "pick-article",
        "name": "Pick Matching Article"
      },
      {
        "parameters": {
          "authentication": "none",
          "requestMethod": "GET",
          "url": "={{ $json.articleUrl || ($items(\"Lookup Manager Input\",0,0)[0].json.manager && $items(\"Lookup Manager Input\",0,0)[0].json.manager.article_url) || '' }}",
          "options": {
            "response": { "responseFormat": "string" }
          }
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [760, -180],
        "id": "fetch-article",
        "name": "Fetch Athletics Article"
      },
      {
        "parameters": {
          "jsCode": "// Extract score + candidate highlight player\\nconst html = $json || '';\\nconst payload = $items(\\\"Pick Matching Article\\\",0,0)[0].json.payload;\\nconst manager = ($items(\\\"Lookup Manager Input\\\",0,0)[0].json.manager)||{};\\n// strip tags\\nconst text = String(html).replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();\\nlet score_text = manager.score_text || '';\nif(!score_text){\n  // naive pattern: find sequences like 7-2, 5-4, etc.\n  const m = text.match(/\\b(\\d+\\s*[-–]\\s*\\d+)\\b/);\n  if(m) score_text = `Final: ${payload.team} vs ${payload.opponent} – ${m[1]}`;\n}\nlet highlight_text = manager.highlight_text || '';\n// player detection by matching action-shot names\nconst driveFiles = $items(\\\"List Action Shots\\\",0,0).map(i=>i.json);\nfunction playerFromName(fn){return fn.replace(/\\.[^.]+$/,'').replace(/[_-]+/g,' ').trim();}\nconst players = [...new Set(driveFiles.map(f=>playerFromName(f.name)))];\nlet highlight_player = manager.highlight_player || '';\nif(!highlight_player){\n  const counts = players.map(p=>({p, c: (text.toLowerCase().match(new RegExp(p.toLowerCase().replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'))||[]).length}));\n  counts.sort((a,b)=>b.c-a.c);\n  if(counts[0] && counts[0].c>0) highlight_player = counts[0].p;\n}\nif(!highlight_text && highlight_player){ highlight_text = `Player of the Match: ${highlight_player}`; }\nreturn [{ json: { payload, score_text, highlight_player, highlight_text } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [980, -180],
        "id": "extract-score-highlight",
        "name": "Extract Score & Highlight"
      },
  
      {
        "parameters": {
          "jsCode": "const driveFiles = $items(\"List Action Shots\",0,0).map(i=>i.json);\\nconst logs = $items(\"Read Posts_Log\",0,0).map(i=>i.json);\\nconst p = $json.highlight_player || '';\\nfunction extractPlayer(filename){ return filename.replace(/\\.[^.]+$/, '').replace(/[_-]+/g,' ').trim(); }\\nfunction pick(files){ return files[Math.floor(Math.random()*Math.max(1,files.length))]; }\\nlet candidates = driveFiles.filter(f=> extractPlayer(f.name).toLowerCase() === p.toLowerCase());\\nif(candidates.length===0) candidates = driveFiles;\\nconst file = pick(candidates);\\nreturn [{ json: { selectedPhoto: { id: file.id, name: file.name }, player_name: p||extractPlayer(file.name), payload: $items(\"Extract Score & Highlight\",0,0)[0].json.payload, score_text: $items(\"Extract Score & Highlight\",0,0)[0].json.score_text, highlight_text: $items(\"Extract Score & Highlight\",0,0)[0].json.highlight_text } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1200, -180],
        "id": "pick-photo-for-result",
        "name": "Pick Photo (Score/Highlight)"
      },
  
      {
        "parameters": {
          "jsCode": "const decks = $items(\"List Score Decks\",0,0).map(i=>i.json);\\nconst deck = decks[Math.floor(Math.random()*Math.max(1,decks.length))];\\nconst j = $json;\\nconst p = j.payload||{};\\nconst tokens = {\\n  DATE: p.dateISO||'',\\n  TEAM: p.team||'',\\n  OPPONENT: p.opponent||'',\\n  SCORE: j.score_text||'',\\n  VENUE: p.venue||'',\\n  HEADLINE: `FINAL: ${p.team} vs ${p.opponent}`\\n};\\nreturn [{ json: { deckId: deck.id, tokens, selectedPhoto: j.selectedPhoto, payload: p, player_name: j.player_name } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1420, -260],
        "id": "score-build-tokens",
        "name": "Score: Build Tokens"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "GET",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId }}"
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [1640, -260],
        "id": "score-get-pres",
        "name": "Slides: Get Presentation (Score)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "const pres = $json;\\nconst slideId = (pres.slides && pres.slides[0] && pres.slides[0].objectId) ? pres.slides[0].objectId : null;\\nconst src = $items(\"Score: Build Tokens\",0,0)[0].json;\\nreturn [{ json: { deckId: src.deckId, slideId, tokens: src.tokens, selectedPhoto: src.selectedPhoto, payload: src.payload, player_name: src.player_name } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1860, -260],
        "id": "score-pick-slide",
        "name": "Score: Pick Slide"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "POST",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId + ':batchUpdate' }}",
          "jsonParameters": true,
          "bodyParametersJson": "={{ { requests: [\n  ...Object.entries($json.tokens).map(([k,v])=>({ replaceAllText: { containsText: { text: '{{'+k+'}}', matchCase: false }, replaceText: String(v||'') } })),\n  { replaceAllShapesWithImage: { imageUrl: 'https://www.googleapis.com/drive/v3/files/' + $json.selectedPhoto.id + '?alt=media', containsText: { text: '{{PHOTO}}', matchCase: false } } }\n] } }}"
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [2080, -260],
        "id": "score-replace",
        "name": "Slides: Replace Tokens + Photo (Score)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "GET",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId + '/pages/' + $json.slideId + '/thumbnail?thumbnailProperties.thumbnailSize=LARGE&mimeType=PNG' }}"
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [2300, -260],
        "id": "score-get-thumb",
        "name": "Slides: Get Thumbnail (Score)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "authentication": "none",
          "requestMethod": "GET",
          "url": "={{ $json.contentUrl }}",
          "options": { "response": { "responseFormat": "file", "binaryPropertyName": "data" } }
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [2520, -260],
        "id": "score-dl-thumb",
        "name": "Download PNG (Score)"
      },
      {
        "parameters": {
          "operation": "upload",
          "binaryData": true,
          "fileName": "={{ $json.payload.match_id + '_score.png' }}",
          "additionalFields": { "parents": ["OUTBOX_FOLDER_ID"] }
        },
        "id": "score-upload",
        "name": "Upload to Outbox (Score)",
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [2740, -260],
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Drive account"
          }
        }
      },
      {
        "parameters": {
          "operation": "appendOrUpdate",
          "documentId": { "value": "OPS_SHEET_ID", "mode": "string" },
          "sheetName": { "value": "Posts_Log", "mode": "string" },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "timestamp": "={{ new Date().toISOString() }}",
              "season": "={{ ($json.payload.dateISO||'').slice(0,4) + '-' + (parseInt(($json.payload.dateISO||'').slice(0,4))+1) }}",
              "date": "={{ $json.payload.dateISO }}",
              "post_type": "SCORE",
              "platform": "instagram",
              "photo_fileId": "={{ $json.selectedPhoto.id }}",
              "photo_name": "={{ $json.selectedPhoto.name }}",
              "player_name": "={{ $json.player_name || '' }}",
              "match_id": "={{ $json.payload.match_id }}",
              "slides_template_fileId": "={{ $json.deckId }}",
              "slideObjectId": "={{ $json.slideId }}",
              "export_fileId": "={{ $json.id || '' }}",
              "status": "rendered"
            }
          }
        },
        "type": "n8n-nodes-base.googleSheets",
        "typeVersion": 4,
        "position": [2960, -260],
        "id": "score-log",
        "name": "Append Posts_Log (Score)",
        "credentials": {
          "googleSheetsOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Sheets account"
          }
        }
      },
  
      {
        "parameters": {
          "jsCode": "const decks = $items(\"List Highlight Decks\",0,0).map(i=>i.json);\\nconst deck = decks[Math.floor(Math.random()*Math.max(1,decks.length))];\\nconst j = $items(\"Pick Photo (Score/Highlight)\",0,0)[0].json;\\nconst p = j.payload||{};\\nconst tokens = {\\n  DATE: p.dateISO||'',\\n  TEAM: p.team||'',\\n  PLAYER: j.player_name||'',\\n  OPPONENT: p.opponent||'',\\n  HIGHLIGHT: j.highlight_text||'',\\n  HEADLINE: `HIGHLIGHT: ${j.player_name||''}`\\n};\\nreturn [{ json: { deckId: deck.id, tokens, selectedPhoto: j.selectedPhoto, payload: p, player_name: j.player_name } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1420, -80],
        "id": "highlight-build-tokens",
        "name": "Highlight: Build Tokens"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "GET",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId }}"
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [1640, -80],
        "id": "highlight-get-pres",
        "name": "Slides: Get Presentation (Highlight)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "const pres = $json;\\nconst slideId = (pres.slides && pres.slides[0] && pres.slides[0].objectId) ? pres.slides[0].objectId : null;\\nconst src = $items(\"Highlight: Build Tokens\",0,0)[0].json;\\nreturn [{ json: { deckId: src.deckId, slideId, tokens: src.tokens, selectedPhoto: src.selectedPhoto, payload: src.payload, player_name: src.player_name } }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1860, -80],
        "id": "highlight-pick-slide",
        "name": "Highlight: Pick Slide"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "POST",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId + ':batchUpdate' }}",
          "jsonParameters": true,
          "bodyParametersJson": "={{ { requests: [\n  ...Object.entries($json.tokens).map(([k,v])=>({ replaceAllText: { containsText: { text: '{{'+k+'}}', matchCase: false }, replaceText: String(v||'') } })),\n  { replaceAllShapesWithImage: { imageUrl: 'https://www.googleapis.com/drive/v3/files/' + $json.selectedPhoto.id + '?alt=media', containsText: { text: '{{PHOTO}}', matchCase: false } } }\n] } }}"
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [2080, -80],
        "id": "highlight-replace",
        "name": "Slides: Replace Tokens + Photo (Highlight)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "requestMethod": "GET",
          "url": "={{ 'https://slides.googleapis.com/v1/presentations/' + $json.deckId + '/pages/' + $json.slideId + '/thumbnail?thumbnailProperties.thumbnailSize=LARGE&mimeType=PNG' }}"
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [2300, -80],
        "id": "highlight-get-thumb",
        "name": "Slides: Get Thumbnail (Highlight)",
        "credentials": {
          "oAuth2Api": {
            "id": "REPLACE_WITH_YOUR_GOOGLE_OAUTH2",
            "name": "Google OAuth2 (Slides/Drive)"
          }
        }
      },
      {
        "parameters": {
          "authentication": "none",
          "requestMethod": "GET",
          "url": "={{ $json.contentUrl }}",
          "options": { "response": { "responseFormat": "file", "binaryPropertyName": "data" } }
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4,
        "position": [2520, -80],
        "id": "highlight-dl-thumb",
        "name": "Download PNG (Highlight)"
      },
      {
        "parameters": {
          "operation": "upload",
          "binaryData": true,
          "fileName": "={{ $json.payload.match_id + '_highlight.png' }}",
          "additionalFields": { "parents": ["OUTBOX_FOLDER_ID"] }
        },
        "id": "highlight-upload",
        "name": "Upload to Outbox (Highlight)",
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [2740, -80],
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Drive account"
          }
        }
      },
      {
        "parameters": {
          "operation": "appendOrUpdate",
          "documentId": { "value": "OPS_SHEET_ID", "mode": "string" },
          "sheetName": { "value": "Posts_Log", "mode": "string" },
          "columns": {
            "mappingMode": "defineBelow",
            "value": {
              "timestamp": "={{ new Date().toISOString() }}",
              "season": "={{ ($json.payload.dateISO||'').slice(0,4) + '-' + (parseInt(($json.payload.dateISO||'').slice(0,4))+1) }}",
              "date": "={{ $json.payload.dateISO }}",
              "post_type": "HIGHLIGHT",
              "platform": "instagram",
              "photo_fileId": "={{ $json.selectedPhoto.id }}",
              "photo_name": "={{ $json.selectedPhoto.name }}",
              "player_name": "={{ $json.player_name || '' }}",
              "match_id": "={{ $json.payload.match_id }}",
              "slides_template_fileId": "={{ $json.deckId }}",
              "slideObjectId": "={{ $json.slideId }}",
              "export_fileId": "={{ $json.id || '' }}",
              "status": "rendered"
            }
          }
        },
        "type": "n8n-nodes-base.googleSheets",
        "typeVersion": 4,
        "position": [2960, -80],
        "id": "highlight-log",
        "name": "Append Posts_Log (Highlight)",
        "credentials": {
          "googleSheetsOAuth2Api": {
            "id": "REPLACE_WITH_YOUR_CRED_ID",
            "name": "Google Sheets account"
          }
        }
      }
    ],
    "connections": {
      "Every 15 min (ET)": { "main": [[{ "node": "Read Schedule", "type": "main", "index": 0 }, { "node": "Read Posts_Log", "type": "main", "index": 0 }, { "node": "Read Manager_Inputs", "type": "main", "index": 0 }]] },
      "Read Schedule": { "main": [[{ "node": "Orchestrate", "type": "main", "index": 0 }]] },
      "Read Posts_Log": { "main": [[{ "node": "Orchestrate", "type": "main", "index": 0 }]] },
      "Read Manager_Inputs": { "main": [[{ "node": "Orchestrate", "type": "main", "index": 0 }]] },
      "Orchestrate": { "main": [[{ "node": "Route by Type", "type": "main", "index": 0 }]] },
      "Route by Type": {
        "main": [
          [{ "node": "List Action Shots", "type": "main", "index": 0 }, { "node": "List Gameday Decks (Pre-Match)", "type": "main", "index": 0 }],
          [{ "node": "List Action Shots", "type": "main", "index": 0 }, { "node": "List Match-Day Decks", "type": "main", "index": 0 }],
          [{ "node": "Lookup Manager Input", "type": "main", "index": 0 }, { "node": "List Action Shots", "type": "main", "index": 0 }, { "node": "List Score Decks", "type": "main", "index": 0 }],
          [{ "node": "Lookup Manager Input", "type": "main", "index": 0 }, { "node": "List Action Shots", "type": "main", "index": 0 }, { "node": "List Highlight Decks", "type": "main", "index": 0 }]
        ]
      },
      "List Action Shots": {
        "main": [
          [{ "node": "Select Weighted Action Shot", "type": "main", "index": 0 }],
          [{ "node": "Select Weighted Action Shot", "type": "main", "index": 0 }],
          [{ "node": "Pick Photo (Score/Highlight)", "type": "main", "index": 0 }],
          [{ "node": "Pick Photo (Score/Highlight)", "type": "main", "index": 0 }]
        ]
      },
      "List Gameday Decks (Pre-Match)": { "main": [[{ "node": "Pre-Match: Build Tokens", "type": "main", "index": 0 }]] },
      "Select Weighted Action Shot": {
        "main": [
          [{ "node": "Pre-Match: Build Tokens", "type": "main", "index": 0 }],
          [{ "node": "Match-Day: Build Tokens", "type": "main", "index": 0 }]
        ]
      },
      "Pre-Match: Build Tokens": { "main": [[{ "node": "Slides: Get Presentation (Pre-Match)", "type": "main", "index": 0 }]] },
      "Slides: Get Presentation (Pre-Match)": { "main": [[{ "node": "Pre-Match: Pick Slide", "type": "main", "index": 0 }]] },
      "Pre-Match: Pick Slide": { "main": [[{ "node": "Slides: Replace Tokens + Photo (Pre-Match)", "type": "main", "index": 0 }]] },
      "Slides: Replace Tokens + Photo (Pre-Match)": { "main": [[{ "node": "Slides: Get Thumbnail (Pre-Match)", "type": "main", "index": 0 }]] },
      "Slides: Get Thumbnail (Pre-Match)": { "main": [[{ "node": "Download PNG (Pre-Match)", "type": "main", "index": 0 }]] },
      "Download PNG (Pre-Match)": { "main": [[{ "node": "Upload to Outbox (Pre-Match)", "type": "main", "index": 0 }]] },
      "Upload to Outbox (Pre-Match)": { "main": [[{ "node": "Append Posts_Log (Pre-Match)", "type": "main", "index": 0 }]] },
  
      "List Match-Day Decks": { "main": [[{ "node": "Match-Day: Build Tokens", "type": "main", "index": 0 }]] },
      "Match-Day: Build Tokens": { "main": [[{ "node": "Slides: Get Presentation (Match-Day)", "type": "main", "index": 0 }]] },
      "Slides: Get Presentation (Match-Day)": { "main": [[{ "node": "Match-Day: Pick Slide", "type": "main", "index": 0 }]] },
      "Match-Day: Pick Slide": { "main": [[{ "node": "Slides: Replace Tokens + Photo (Match-Day)", "type": "main", "index": 0 }]] },
      "Slides: Replace Tokens + Photo (Match-Day)": { "main": [[{ "node": "Slides: Get Thumbnail (Match-Day)", "type": "main", "index": 0 }]] },
      "Slides: Get Thumbnail (Match-Day)": { "main": [[{ "node": "Download PNG (Match-Day)", "type": "main", "index": 0 }]] },
      "Download PNG (Match-Day)": { "main": [[{ "node": "Upload to Outbox (Match-Day)", "type": "main", "index": 0 }]] },
      "Upload to Outbox (Match-Day)": { "main": [[{ "node": "Append Posts_Log (Match-Day)", "type": "main", "index": 0 }]] },
  
      "Lookup Manager Input": {
        "main": [
          [{ "node": "Has Manager Data?", "type": "main", "index": 0 }],
          [{ "node": "Has Manager Data?", "type": "main", "index": 0 }]
        ]
      },
      "Has Manager Data?": {
        "main": [
          [
            { "node": "Extract Score & Highlight", "type": "main", "index": 0 }
          ],
          [
            { "node": "RSS Feed Read (Tennis)", "type": "main", "index": 0 }
          ]
        ]
      },
      "RSS Feed Read (Tennis)": { "main": [[{ "node": "Pick Matching Article", "type": "main", "index": 0 }]] },
      "Pick Matching Article": { "main": [[{ "node": "Fetch Athletics Article", "type": "main", "index": 0 }]] },
      "Fetch Athletics Article": { "main": [[{ "node": "Extract Score & Highlight", "type": "main", "index": 0 }]] },
      "Extract Score & Highlight": { "main": [[{ "node": "Pick Photo (Score/Highlight)", "type": "main", "index": 0 }]] },
  
      "Pick Photo (Score/Highlight)": {
        "main": [
          [{ "node": "Score: Build Tokens", "type": "main", "index": 0 }],
          [{ "node": "Highlight: Build Tokens", "type": "main", "index": 0 }]
        ]
      },
      "Score: Build Tokens": { "main": [[{ "node": "Slides: Get Presentation (Score)", "type": "main", "index": 0 }]] },
      "Slides: Get Presentation (Score)": { "main": [[{ "node": "Score: Pick Slide", "type": "main", "index": 0 }]] },
      "Score: Pick Slide": { "main": [[{ "node": "Slides: Replace Tokens + Photo (Score)", "type": "main", "index": 0 }]] },
      "Slides: Replace Tokens + Photo (Score)": { "main": [[{ "node": "Slides: Get Thumbnail (Score)", "type": "main", "index": 0 }]] },
      "Slides: Get Thumbnail (Score)": { "main": [[{ "node": "Download PNG (Score)", "type": "main", "index": 0 }]] },
      "Download PNG (Score)": { "main": [[{ "node": "Upload to Outbox (Score)", "type": "main", "index": 0 }]] },
      "Upload to Outbox (Score)": { "main": [[{ "node": "Append Posts_Log (Score)", "type": "main", "index": 0 }]] },
  
      "Highlight: Build Tokens": { "main": [[{ "node": "Slides: Get Presentation (Highlight)", "type": "main", "index": 0 }]] },
      "Slides: Get Presentation (Highlight)": { "main": [[{ "node": "Highlight: Pick Slide", "type": "main", "index": 0 }]] },
      "Highlight: Pick Slide": { "main": [[{ "node": "Slides: Replace Tokens + Photo (Highlight)", "type": "main", "index": 0 }]] },
      "Slides: Replace Tokens + Photo (Highlight)": { "main": [[{ "node": "Slides: Get Thumbnail (Highlight)", "type": "main", "index": 0 }]] },
      "Slides: Get Thumbnail (Highlight)": { "main": [[{ "node": "Download PNG (Highlight)", "type": "main", "index": 0 }]] },
      "Download PNG (Highlight)": { "main": [[{ "node": "Upload to Outbox (Highlight)", "type": "main", "index": 0 }]] },
      "Upload to Outbox (Highlight)": { "main": [[{ "node": "Append Posts_Log (Highlight)", "type": "main", "index": 0 }]] }
    },
    "pinData": {},
    "meta": { "instanceId": "rh-tennis-orchestrator-001" }
  }
  